# coding: utf-8

"""
    Safe Checkout

    Simple, yet elegant web interfaces for your convenience. One request away from your first secured C2C transaction.

    The version of the OpenAPI document: 2.0.102
    Contact: noc@tripartie.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from tpdk_safe_checkout.models.statistic_output_array_single_value import StatisticOutputArraySingleValue
from typing import Optional, Set
from typing_extensions import Self

class StatisticOutputMultipleValue(BaseModel):
    """
    StatisticOutputMultipleValue
    """ # noqa: E501
    request: StrictStr
    values: List[StatisticOutputArraySingleValue]
    __properties: ClassVar[List[str]] = ["request", "values"]

    @field_validator('request')
    def request_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['FINALIZED_CASHOUT_AMOUNT', 'FINALIZED_CASHOUT_COUNT', 'PENDING_CASHOUT_AMOUNT', 'PENDING_CASHOUT_COUNT', 'OFFER_PUBLISHED_AMOUNT', 'OFFER_PUBLISHED_COUNT', 'TRANSACTION_ACCEPTED_PROPOSAL_AMOUNT', 'TRANSACTION_ACCEPTED_PROPOSAL_COUNT', 'TRANSACTION_ACCEPTED_PROPOSAL_SERVICE_FEE', 'TRANSACTION_ACCEPTED_PROPOSAL_SHIPPING_FEE', 'TRANSACTION_COMPLETED_AMOUNT', 'TRANSACTION_COMPLETED_COUNT', 'TRANSACTION_COMPLETED_SERVICE_FEE', 'TRANSACTION_COMPLETED_SHIPPING_FEE', 'TRANSACTION_CREATED_AMOUNT', 'TRANSACTION_CREATED_COUNT', 'WALLET_AVAILABLE_AMOUNT', 'WALLET_IN_CUSTODY_AMOUNT']):
            raise ValueError("must be one of enum values ('FINALIZED_CASHOUT_AMOUNT', 'FINALIZED_CASHOUT_COUNT', 'PENDING_CASHOUT_AMOUNT', 'PENDING_CASHOUT_COUNT', 'OFFER_PUBLISHED_AMOUNT', 'OFFER_PUBLISHED_COUNT', 'TRANSACTION_ACCEPTED_PROPOSAL_AMOUNT', 'TRANSACTION_ACCEPTED_PROPOSAL_COUNT', 'TRANSACTION_ACCEPTED_PROPOSAL_SERVICE_FEE', 'TRANSACTION_ACCEPTED_PROPOSAL_SHIPPING_FEE', 'TRANSACTION_COMPLETED_AMOUNT', 'TRANSACTION_COMPLETED_COUNT', 'TRANSACTION_COMPLETED_SERVICE_FEE', 'TRANSACTION_COMPLETED_SHIPPING_FEE', 'TRANSACTION_CREATED_AMOUNT', 'TRANSACTION_CREATED_COUNT', 'WALLET_AVAILABLE_AMOUNT', 'WALLET_IN_CUSTODY_AMOUNT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatisticOutputMultipleValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in values (list)
        _items = []
        if self.values:
            for _item_values in self.values:
                if _item_values:
                    _items.append(_item_values.to_dict())
            _dict['values'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatisticOutputMultipleValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "request": obj.get("request"),
            "values": [StatisticOutputArraySingleValue.from_dict(_item) for _item in obj["values"]] if obj.get("values") is not None else None
        })
        return _obj


