/*
 * Safe Checkout
 * Simple, yet elegant web interfaces for your convenience. One request away from your first secured C2C transaction.
 *
 * The version of the OpenAPI document: 2.0.22
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tripartie.safecheckout.api;

import com.tripartie.safecheckout.ApiException;
import com.tripartie.safecheckout.model.AccessError;
import com.tripartie.safecheckout.model.AuthError;
import com.tripartie.safecheckout.model.GenericError;
import com.tripartie.safecheckout.model.InvalidQueryError;
import com.tripartie.safecheckout.model.NotFoundError;
import com.tripartie.safecheckout.model.OrganizationCollectionRead;
import com.tripartie.safecheckout.model.OrganizationRead;
import com.tripartie.safecheckout.model.RateLimitError;
import com.tripartie.safecheckout.model.UnprocessableEntity;
import com.tripartie.safecheckout.model.UserCollectionRead;
import com.tripartie.safecheckout.model.UserEmailValidationWrite;
import com.tripartie.safecheckout.model.UserInvite;
import com.tripartie.safecheckout.model.UserPostRegisterRead;
import com.tripartie.safecheckout.model.UserSupportRead;
import com.tripartie.safecheckout.model.UserTotpSetupRead;
import com.tripartie.safecheckout.model.UserTotpToggleWrite;
import com.tripartie.safecheckout.model.UserUpdate;
import com.tripartie.safecheckout.model.UserUserEmailUpdate;
import com.tripartie.safecheckout.model.UserUserPasswordUpdate;
import com.tripartie.safecheckout.model.UserUserRead;
import com.tripartie.safecheckout.model.UserUserSubscribed;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminApi
 */
@Disabled
public class AdminApiTest {

    private final AdminApi api = new AdminApi();

    /**
     * Organization invite
     *
     * Invite a user to your organization workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiInvitePostTest() throws ApiException {
        UserInvite userInvite = null;
        UserPostRegisterRead response = api.apiInvitePost(userInvite)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves the collection of Organization resources.
     *
     * Retrieves the collection of Organization resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiOrganizationsGetCollectionTest() throws ApiException {
        Integer page = null;
        Integer itemsPerPage = null;
        String name = null;
        List<OrganizationCollectionRead> response = api.apiOrganizationsGetCollection()
                .page(page)
                .itemsPerPage(itemsPerPage)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a Organization resource.
     *
     * Retrieves a Organization resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiOrganizationsIdGetTest() throws ApiException {
        String id = null;
        OrganizationRead response = api.apiOrganizationsIdGet(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves the collection of User resources.
     *
     * Retrieves the collection of User resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersGetCollectionTest() throws ApiException {
        Integer page = null;
        List<UserCollectionRead> response = api.apiUsersGetCollection()
                .page(page)
                .execute();
        // TODO: test validations
    }

    /**
     * Removes the User resource.
     *
     * Removes the User resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdDeleteTest() throws ApiException {
        String id = null;
        api.apiUsersIdDelete(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a User resource.
     *
     * Retrieves a User resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdGetTest() throws ApiException {
        String id = null;
        UserSupportRead response = api.apiUsersIdGet(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Update your profile
     *
     * Updates the User resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdPatchTest() throws ApiException {
        String id = null;
        UserUpdate userUpdate = null;
        UserPostRegisterRead response = api.apiUsersIdPatch(id, userUpdate)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates the User resource.
     *
     * Updates the User resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIddisablePatchTest() throws ApiException {
        String id = null;
        Object body = null;
        UserUserSubscribed response = api.apiUsersIddisablePatch(id, body)
                .execute();
        // TODO: test validations
    }

    /**
     * Update user email
     *
     * Updates the User resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdemailPatchTest() throws ApiException {
        String id = null;
        UserUserEmailUpdate userUserEmailUpdate = null;
        UserUserRead response = api.apiUsersIdemailPatch(id, userUserEmailUpdate)
                .execute();
        // TODO: test validations
    }

    /**
     * Validate email ownership
     *
     * Updates the User resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdemailValidationPatchTest() throws ApiException {
        String id = null;
        UserEmailValidationWrite userEmailValidationWrite = null;
        UserPostRegisterRead response = api.apiUsersIdemailValidationPatch(id, userEmailValidationWrite)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates the User resource.
     *
     * Updates the User resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdenablePatchTest() throws ApiException {
        String id = null;
        Object body = null;
        UserUserSubscribed response = api.apiUsersIdenablePatch(id, body)
                .execute();
        // TODO: test validations
    }

    /**
     * Change your password
     *
     * Updates the User resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdpasswordPatchTest() throws ApiException {
        String id = null;
        UserUserPasswordUpdate userUserPasswordUpdate = null;
        UserUserRead response = api.apiUsersIdpasswordPatch(id, userUserPasswordUpdate)
                .execute();
        // TODO: test validations
    }

    /**
     * Setup an additional authentication factor
     *
     * Updates the User resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdtotpSetupPatchTest() throws ApiException {
        String id = null;
        Object body = null;
        UserTotpSetupRead response = api.apiUsersIdtotpSetupPatch(id, body)
                .execute();
        // TODO: test validations
    }

    /**
     * Disable the second authentication factor
     *
     * Updates the User resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdtotpTogglePatchTest() throws ApiException {
        String id = null;
        UserTotpToggleWrite userTotpToggleWrite = null;
        Object response = api.apiUsersIdtotpTogglePatch(id, userTotpToggleWrite)
                .execute();
        // TODO: test validations
    }

}
