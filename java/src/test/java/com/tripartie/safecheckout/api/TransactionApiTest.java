/*
 * Safe Checkout
 * Simple, yet elegant web interfaces for your convenience. One request away from your first secured C2C transaction.
 *
 * The version of the OpenAPI document: 2.0.45
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tripartie.safecheckout.api;

import com.tripartie.safecheckout.ApiException;
import com.tripartie.safecheckout.model.AccessError;
import com.tripartie.safecheckout.model.AuthError;
import com.tripartie.safecheckout.model.GenericError;
import com.tripartie.safecheckout.model.InvalidQueryError;
import com.tripartie.safecheckout.model.NotFoundError;
import com.tripartie.safecheckout.model.QuoteRead;
import com.tripartie.safecheckout.model.QuoteUpdate;
import com.tripartie.safecheckout.model.QuoteWrite;
import com.tripartie.safecheckout.model.RateLimitError;
import com.tripartie.safecheckout.model.TransactionCollectionRead;
import com.tripartie.safecheckout.model.TransactionRead;
import com.tripartie.safecheckout.model.TransactionUpdate;
import com.tripartie.safecheckout.model.TransactionWrite;
import com.tripartie.safecheckout.model.UnprocessableEntity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionApi
 */
@Disabled
public class TransactionApiTest {

    private final TransactionApi api = new TransactionApi();

    /**
     * Retrieve a Quote
     *
     * Retrieves a Quote resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiQuotesIdGetTest() throws ApiException {
        String id = null;
        QuoteRead response = api.apiQuotesIdGet(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a Quote prior to issuing a Transaction
     *
     * Updates the Quote resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiQuotesIdPatchTest() throws ApiException {
        String id = null;
        QuoteUpdate quoteUpdate = null;
        QuoteRead response = api.apiQuotesIdPatch(id, quoteUpdate)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a Quote prior to issuing a Transaction
     *
     * Creates a Quote resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiQuotesPostTest() throws ApiException {
        QuoteWrite quoteWrite = null;
        QuoteRead response = api.apiQuotesPost(quoteWrite)
                .execute();
        // TODO: test validations
    }

    /**
     * List all Transaction
     *
     * Retrieve a list of Transaction paginated
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsGetCollectionTest() throws ApiException {
        Integer page = null;
        String orderCreatedAt = null;
        String orderUpdatedAt = null;
        String createdAtBefore = null;
        String createdAtStrictlyBefore = null;
        String createdAtAfter = null;
        String createdAtStrictlyAfter = null;
        String updatedAtBefore = null;
        String updatedAtStrictlyBefore = null;
        String updatedAtAfter = null;
        String updatedAtStrictlyAfter = null;
        String status = null;
        List<String> status2 = null;
        String offerTitle = null;
        List<TransactionCollectionRead> response = api.apiTransactionsGetCollection()
                .page(page)
                .orderCreatedAt(orderCreatedAt)
                .orderUpdatedAt(orderUpdatedAt)
                .createdAtBefore(createdAtBefore)
                .createdAtStrictlyBefore(createdAtStrictlyBefore)
                .createdAtAfter(createdAtAfter)
                .createdAtStrictlyAfter(createdAtStrictlyAfter)
                .updatedAtBefore(updatedAtBefore)
                .updatedAtStrictlyBefore(updatedAtStrictlyBefore)
                .updatedAtAfter(updatedAtAfter)
                .updatedAtStrictlyAfter(updatedAtStrictlyAfter)
                .status(status)
                .status2(status2)
                .offerTitle(offerTitle)
                .execute();
        // TODO: test validations
    }

    /**
     * Initialize a new Transaction
     *
     * Create a new Transaction for Preauthorization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsPostTest() throws ApiException {
        TransactionWrite transactionWrite = null;
        TransactionRead response = api.apiTransactionsPost(transactionWrite)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a Transaction
     *
     * Retrieve a single Transaction by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsUlidGetTest() throws ApiException {
        String ulid = null;
        TransactionRead response = api.apiTransactionsUlidGet(ulid)
                .execute();
        // TODO: test validations
    }

    /**
     * Interact with a Transaction
     *
     * Make decision upon a Transaction in order to make it evolve
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsUlidPatchTest() throws ApiException {
        String ulid = null;
        TransactionUpdate transactionUpdate = null;
        TransactionRead response = api.apiTransactionsUlidPatch(ulid, transactionUpdate)
                .execute();
        // TODO: test validations
    }

}
