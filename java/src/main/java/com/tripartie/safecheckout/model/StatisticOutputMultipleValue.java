/*
 * Safe Checkout
 * Simple, yet elegant web interfaces for your convenience. One request away from your first secured C2C transaction.
 *
 * The version of the OpenAPI document: 2.0.81
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tripartie.safecheckout.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.tripartie.safecheckout.model.StatisticOutputArraySingleValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.tripartie.safecheckout.JSON;

/**
 * StatisticOutputMultipleValue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-21T08:05:03.783949Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class StatisticOutputMultipleValue {
  /**
   * Gets or Sets request
   */
  @JsonAdapter(RequestEnum.Adapter.class)
  public enum RequestEnum {
    OFFER_PUBLISHED_AMOUNT("OFFER_PUBLISHED_AMOUNT"),
    
    OFFER_PUBLISHED_COUNT("OFFER_PUBLISHED_COUNT"),
    
    TRANSACTION_ACCEPTED_PROPOSAL_AMOUNT("TRANSACTION_ACCEPTED_PROPOSAL_AMOUNT"),
    
    TRANSACTION_ACCEPTED_PROPOSAL_COUNT("TRANSACTION_ACCEPTED_PROPOSAL_COUNT"),
    
    TRANSACTION_ACCEPTED_PROPOSAL_SERVICE_FEE("TRANSACTION_ACCEPTED_PROPOSAL_SERVICE_FEE"),
    
    TRANSACTION_ACCEPTED_PROPOSAL_SHIPPING_FEE("TRANSACTION_ACCEPTED_PROPOSAL_SHIPPING_FEE"),
    
    TRANSACTION_COMPLETED_AMOUNT("TRANSACTION_COMPLETED_AMOUNT"),
    
    TRANSACTION_COMPLETED_COUNT("TRANSACTION_COMPLETED_COUNT"),
    
    TRANSACTION_COMPLETED_SERVICE_FEE("TRANSACTION_COMPLETED_SERVICE_FEE"),
    
    TRANSACTION_COMPLETED_SHIPPING_FEE("TRANSACTION_COMPLETED_SHIPPING_FEE"),
    
    TRANSACTION_CREATED_AMOUNT("TRANSACTION_CREATED_AMOUNT"),
    
    TRANSACTION_CREATED_COUNT("TRANSACTION_CREATED_COUNT"),
    
    WALLET_AVAILABLE_AMOUNT("WALLET_AVAILABLE_AMOUNT"),
    
    WALLET_IN_CUSTODY_AMOUNT("WALLET_IN_CUSTODY_AMOUNT");

    private String value;

    RequestEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestEnum fromValue(String value) {
      for (RequestEnum b : RequestEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RequestEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private RequestEnum request;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<StatisticOutputArraySingleValue> values = new ArrayList<>();

  public StatisticOutputMultipleValue() {
  }

  public StatisticOutputMultipleValue request(RequestEnum request) {
    this.request = request;
    return this;
  }

  /**
   * Get request
   * @return request
   */
  @javax.annotation.Nonnull
  public RequestEnum getRequest() {
    return request;
  }

  public void setRequest(RequestEnum request) {
    this.request = request;
  }


  public StatisticOutputMultipleValue values(List<StatisticOutputArraySingleValue> values) {
    this.values = values;
    return this;
  }

  public StatisticOutputMultipleValue addValuesItem(StatisticOutputArraySingleValue valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * Get values
   * @return values
   */
  @javax.annotation.Nonnull
  public List<StatisticOutputArraySingleValue> getValues() {
    return values;
  }

  public void setValues(List<StatisticOutputArraySingleValue> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatisticOutputMultipleValue {\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("request");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("request");
    openapiRequiredFields.add("values");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatisticOutputMultipleValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatisticOutputMultipleValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatisticOutputMultipleValue is not found in the empty JSON string", StatisticOutputMultipleValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatisticOutputMultipleValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatisticOutputMultipleValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StatisticOutputMultipleValue.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("request").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request").toString()));
      }
      // validate the required field `request`
      RequestEnum.validateJsonElement(jsonObj.get("request"));
      // ensure the json data is an array
      if (!jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }

      JsonArray jsonArrayvalues = jsonObj.getAsJsonArray("values");
      // validate the required field `values` (array)
      for (int i = 0; i < jsonArrayvalues.size(); i++) {
        StatisticOutputArraySingleValue.validateJsonElement(jsonArrayvalues.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatisticOutputMultipleValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatisticOutputMultipleValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatisticOutputMultipleValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatisticOutputMultipleValue.class));

       return (TypeAdapter<T>) new TypeAdapter<StatisticOutputMultipleValue>() {
           @Override
           public void write(JsonWriter out, StatisticOutputMultipleValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatisticOutputMultipleValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatisticOutputMultipleValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatisticOutputMultipleValue
   * @throws IOException if the JSON string is invalid with respect to StatisticOutputMultipleValue
   */
  public static StatisticOutputMultipleValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatisticOutputMultipleValue.class);
  }

  /**
   * Convert an instance of StatisticOutputMultipleValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

