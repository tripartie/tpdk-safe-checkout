/*
 * Safe Checkout
 * Simple, yet elegant web interfaces for your convenience. One request away from your first secured C2C transaction.
 *
 * The version of the OpenAPI document: 2.0.98
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tripartie.safecheckout.api;

import com.tripartie.safecheckout.ApiCallback;
import com.tripartie.safecheckout.ApiClient;
import com.tripartie.safecheckout.ApiException;
import com.tripartie.safecheckout.ApiResponse;
import com.tripartie.safecheckout.Configuration;
import com.tripartie.safecheckout.Pair;
import com.tripartie.safecheckout.ProgressRequestBody;
import com.tripartie.safecheckout.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.tripartie.safecheckout.model.AccessError;
import com.tripartie.safecheckout.model.AuthError;
import com.tripartie.safecheckout.model.GenericError;
import com.tripartie.safecheckout.model.InvalidQueryError;
import com.tripartie.safecheckout.model.NotFoundError;
import com.tripartie.safecheckout.model.QuoteRead;
import com.tripartie.safecheckout.model.QuoteUpdate;
import com.tripartie.safecheckout.model.QuoteWrite;
import com.tripartie.safecheckout.model.RateLimitError;
import com.tripartie.safecheckout.model.TransactionCollectionRead;
import com.tripartie.safecheckout.model.TransactionRead;
import com.tripartie.safecheckout.model.TransactionUpdate;
import com.tripartie.safecheckout.model.TransactionWrite;
import com.tripartie.safecheckout.model.UnprocessableEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call apiQuotesPostCall(QuoteWrite quoteWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quoteWrite;

        // create path and map variables
        String localVarPath = "/quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiQuotesPostValidateBeforeCall(QuoteWrite quoteWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteWrite' is set
        if (quoteWrite == null) {
            throw new ApiException("Missing the required parameter 'quoteWrite' when calling apiQuotesPost(Async)");
        }

        return apiQuotesPostCall(quoteWrite, _callback);

    }


    private ApiResponse<QuoteRead> apiQuotesPostWithHttpInfo(QuoteWrite quoteWrite) throws ApiException {
        okhttp3.Call localVarCall = apiQuotesPostValidateBeforeCall(quoteWrite, null);
        Type localVarReturnType = new TypeToken<QuoteRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiQuotesPostAsync(QuoteWrite quoteWrite, final ApiCallback<QuoteRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiQuotesPostValidateBeforeCall(quoteWrite, _callback);
        Type localVarReturnType = new TypeToken<QuoteRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiQuotesPostRequest {
        private final QuoteWrite quoteWrite;

        private APIapiQuotesPostRequest(QuoteWrite quoteWrite) {
            this.quoteWrite = quoteWrite;
        }

        /**
         * Build call for apiQuotesPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Quote resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiQuotesPostCall(quoteWrite, _callback);
        }

        /**
         * Execute apiQuotesPost request
         * @return QuoteRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Quote resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public QuoteRead execute() throws ApiException {
            ApiResponse<QuoteRead> localVarResp = apiQuotesPostWithHttpInfo(quoteWrite);
            return localVarResp.getData();
        }

        /**
         * Execute apiQuotesPost request with HTTP info returned
         * @return ApiResponse&lt;QuoteRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Quote resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QuoteRead> executeWithHttpInfo() throws ApiException {
            return apiQuotesPostWithHttpInfo(quoteWrite);
        }

        /**
         * Execute apiQuotesPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Quote resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QuoteRead> _callback) throws ApiException {
            return apiQuotesPostAsync(quoteWrite, _callback);
        }
    }

    /**
     * Create a Quote prior to issuing a Transaction
     * Creates a Quote resource.
     * @param quoteWrite The new Quote resource (required)
     * @return APIapiQuotesPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Quote resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiQuotesPostRequest apiQuotesPost(QuoteWrite quoteWrite) {
        return new APIapiQuotesPostRequest(quoteWrite);
    }
    private okhttp3.Call apiQuotesUlidGetCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{ulid}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiQuotesUlidGetValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiQuotesUlidGet(Async)");
        }

        return apiQuotesUlidGetCall(ulid, _callback);

    }


    private ApiResponse<QuoteRead> apiQuotesUlidGetWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiQuotesUlidGetValidateBeforeCall(ulid, null);
        Type localVarReturnType = new TypeToken<QuoteRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiQuotesUlidGetAsync(String ulid, final ApiCallback<QuoteRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiQuotesUlidGetValidateBeforeCall(ulid, _callback);
        Type localVarReturnType = new TypeToken<QuoteRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiQuotesUlidGetRequest {
        private final String ulid;

        private APIapiQuotesUlidGetRequest(String ulid) {
            this.ulid = ulid;
        }

        /**
         * Build call for apiQuotesUlidGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Quote resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiQuotesUlidGetCall(ulid, _callback);
        }

        /**
         * Execute apiQuotesUlidGet request
         * @return QuoteRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Quote resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public QuoteRead execute() throws ApiException {
            ApiResponse<QuoteRead> localVarResp = apiQuotesUlidGetWithHttpInfo(ulid);
            return localVarResp.getData();
        }

        /**
         * Execute apiQuotesUlidGet request with HTTP info returned
         * @return ApiResponse&lt;QuoteRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Quote resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QuoteRead> executeWithHttpInfo() throws ApiException {
            return apiQuotesUlidGetWithHttpInfo(ulid);
        }

        /**
         * Execute apiQuotesUlidGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Quote resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QuoteRead> _callback) throws ApiException {
            return apiQuotesUlidGetAsync(ulid, _callback);
        }
    }

    /**
     * Retrieve a Quote
     * Retrieves a Quote resource.
     * @param ulid Quote identifier (required)
     * @return APIapiQuotesUlidGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiQuotesUlidGetRequest apiQuotesUlidGet(String ulid) {
        return new APIapiQuotesUlidGetRequest(ulid);
    }
    private okhttp3.Call apiQuotesUlidPatchCall(String ulid, QuoteUpdate quoteUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quoteUpdate;

        // create path and map variables
        String localVarPath = "/quotes/{ulid}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiQuotesUlidPatchValidateBeforeCall(String ulid, QuoteUpdate quoteUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiQuotesUlidPatch(Async)");
        }

        // verify the required parameter 'quoteUpdate' is set
        if (quoteUpdate == null) {
            throw new ApiException("Missing the required parameter 'quoteUpdate' when calling apiQuotesUlidPatch(Async)");
        }

        return apiQuotesUlidPatchCall(ulid, quoteUpdate, _callback);

    }


    private ApiResponse<QuoteRead> apiQuotesUlidPatchWithHttpInfo(String ulid, QuoteUpdate quoteUpdate) throws ApiException {
        okhttp3.Call localVarCall = apiQuotesUlidPatchValidateBeforeCall(ulid, quoteUpdate, null);
        Type localVarReturnType = new TypeToken<QuoteRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiQuotesUlidPatchAsync(String ulid, QuoteUpdate quoteUpdate, final ApiCallback<QuoteRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiQuotesUlidPatchValidateBeforeCall(ulid, quoteUpdate, _callback);
        Type localVarReturnType = new TypeToken<QuoteRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiQuotesUlidPatchRequest {
        private final String ulid;
        private final QuoteUpdate quoteUpdate;

        private APIapiQuotesUlidPatchRequest(String ulid, QuoteUpdate quoteUpdate) {
            this.ulid = ulid;
            this.quoteUpdate = quoteUpdate;
        }

        /**
         * Build call for apiQuotesUlidPatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Quote resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiQuotesUlidPatchCall(ulid, quoteUpdate, _callback);
        }

        /**
         * Execute apiQuotesUlidPatch request
         * @return QuoteRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Quote resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public QuoteRead execute() throws ApiException {
            ApiResponse<QuoteRead> localVarResp = apiQuotesUlidPatchWithHttpInfo(ulid, quoteUpdate);
            return localVarResp.getData();
        }

        /**
         * Execute apiQuotesUlidPatch request with HTTP info returned
         * @return ApiResponse&lt;QuoteRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Quote resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QuoteRead> executeWithHttpInfo() throws ApiException {
            return apiQuotesUlidPatchWithHttpInfo(ulid, quoteUpdate);
        }

        /**
         * Execute apiQuotesUlidPatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Quote resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QuoteRead> _callback) throws ApiException {
            return apiQuotesUlidPatchAsync(ulid, quoteUpdate, _callback);
        }
    }

    /**
     * Update a Quote prior to issuing a Transaction
     * Updates the Quote resource.
     * @param ulid Quote identifier (required)
     * @param quoteUpdate The updated Quote resource (required)
     * @return APIapiQuotesUlidPatchRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiQuotesUlidPatchRequest apiQuotesUlidPatch(String ulid, QuoteUpdate quoteUpdate) {
        return new APIapiQuotesUlidPatchRequest(ulid, quoteUpdate);
    }
    private okhttp3.Call apiTransactionsGetCollectionCall(Integer page, String orderCreatedAt, String orderUpdatedAt, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String updatedAtBefore, String updatedAtStrictlyBefore, String updatedAtAfter, String updatedAtStrictlyAfter, String status, List<String> status2, String offerTitle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[createdAt]", orderCreatedAt));
        }

        if (orderUpdatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[updatedAt]", orderUpdatedAt));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[before]", createdAtBefore));
        }

        if (createdAtStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_before]", createdAtStrictlyBefore));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[after]", createdAtAfter));
        }

        if (createdAtStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_after]", createdAtStrictlyAfter));
        }

        if (updatedAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[before]", updatedAtBefore));
        }

        if (updatedAtStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[strictly_before]", updatedAtStrictlyBefore));
        }

        if (updatedAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[after]", updatedAtAfter));
        }

        if (updatedAtStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[strictly_after]", updatedAtStrictlyAfter));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (status2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "status[]", status2));
        }

        if (offerTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offer.title", offerTitle));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsGetCollectionValidateBeforeCall(Integer page, String orderCreatedAt, String orderUpdatedAt, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String updatedAtBefore, String updatedAtStrictlyBefore, String updatedAtAfter, String updatedAtStrictlyAfter, String status, List<String> status2, String offerTitle, final ApiCallback _callback) throws ApiException {
        return apiTransactionsGetCollectionCall(page, orderCreatedAt, orderUpdatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, status, status2, offerTitle, _callback);

    }


    private ApiResponse<List<TransactionCollectionRead>> apiTransactionsGetCollectionWithHttpInfo(Integer page, String orderCreatedAt, String orderUpdatedAt, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String updatedAtBefore, String updatedAtStrictlyBefore, String updatedAtAfter, String updatedAtStrictlyAfter, String status, List<String> status2, String offerTitle) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsGetCollectionValidateBeforeCall(page, orderCreatedAt, orderUpdatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, status, status2, offerTitle, null);
        Type localVarReturnType = new TypeToken<List<TransactionCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiTransactionsGetCollectionAsync(Integer page, String orderCreatedAt, String orderUpdatedAt, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String updatedAtBefore, String updatedAtStrictlyBefore, String updatedAtAfter, String updatedAtStrictlyAfter, String status, List<String> status2, String offerTitle, final ApiCallback<List<TransactionCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsGetCollectionValidateBeforeCall(page, orderCreatedAt, orderUpdatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, status, status2, offerTitle, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiTransactionsGetCollectionRequest {
        private Integer page;
        private String orderCreatedAt;
        private String orderUpdatedAt;
        private String createdAtBefore;
        private String createdAtStrictlyBefore;
        private String createdAtAfter;
        private String createdAtStrictlyAfter;
        private String updatedAtBefore;
        private String updatedAtStrictlyBefore;
        private String updatedAtAfter;
        private String updatedAtStrictlyAfter;
        private String status;
        private List<String> status2;
        private String offerTitle;

        private APIapiTransactionsGetCollectionRequest() {
        }

        /**
         * Set page
         * @param page The collection page number (optional, default to 1)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set orderCreatedAt
         * @param orderCreatedAt  (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest orderCreatedAt(String orderCreatedAt) {
            this.orderCreatedAt = orderCreatedAt;
            return this;
        }

        /**
         * Set orderUpdatedAt
         * @param orderUpdatedAt  (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest orderUpdatedAt(String orderUpdatedAt) {
            this.orderUpdatedAt = orderUpdatedAt;
            return this;
        }

        /**
         * Set createdAtBefore
         * @param createdAtBefore  (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest createdAtBefore(String createdAtBefore) {
            this.createdAtBefore = createdAtBefore;
            return this;
        }

        /**
         * Set createdAtStrictlyBefore
         * @param createdAtStrictlyBefore  (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest createdAtStrictlyBefore(String createdAtStrictlyBefore) {
            this.createdAtStrictlyBefore = createdAtStrictlyBefore;
            return this;
        }

        /**
         * Set createdAtAfter
         * @param createdAtAfter  (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest createdAtAfter(String createdAtAfter) {
            this.createdAtAfter = createdAtAfter;
            return this;
        }

        /**
         * Set createdAtStrictlyAfter
         * @param createdAtStrictlyAfter  (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest createdAtStrictlyAfter(String createdAtStrictlyAfter) {
            this.createdAtStrictlyAfter = createdAtStrictlyAfter;
            return this;
        }

        /**
         * Set updatedAtBefore
         * @param updatedAtBefore  (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest updatedAtBefore(String updatedAtBefore) {
            this.updatedAtBefore = updatedAtBefore;
            return this;
        }

        /**
         * Set updatedAtStrictlyBefore
         * @param updatedAtStrictlyBefore  (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest updatedAtStrictlyBefore(String updatedAtStrictlyBefore) {
            this.updatedAtStrictlyBefore = updatedAtStrictlyBefore;
            return this;
        }

        /**
         * Set updatedAtAfter
         * @param updatedAtAfter  (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest updatedAtAfter(String updatedAtAfter) {
            this.updatedAtAfter = updatedAtAfter;
            return this;
        }

        /**
         * Set updatedAtStrictlyAfter
         * @param updatedAtStrictlyAfter  (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest updatedAtStrictlyAfter(String updatedAtStrictlyAfter) {
            this.updatedAtStrictlyAfter = updatedAtStrictlyAfter;
            return this;
        }

        /**
         * Set status
         * @param status Filter on a specific value of status (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Set status2
         * @param status2 Filter on a limited subset of status (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest status2(List<String> status2) {
            this.status2 = status2;
            return this;
        }

        /**
         * Set offerTitle
         * @param offerTitle  (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest offerTitle(String offerTitle) {
            this.offerTitle = offerTitle;
            return this;
        }

        /**
         * Build call for apiTransactionsGetCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiTransactionsGetCollectionCall(page, orderCreatedAt, orderUpdatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, status, status2, offerTitle, _callback);
        }

        /**
         * Execute apiTransactionsGetCollection request
         * @return List&lt;TransactionCollectionRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public List<TransactionCollectionRead> execute() throws ApiException {
            ApiResponse<List<TransactionCollectionRead>> localVarResp = apiTransactionsGetCollectionWithHttpInfo(page, orderCreatedAt, orderUpdatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, status, status2, offerTitle);
            return localVarResp.getData();
        }

        /**
         * Execute apiTransactionsGetCollection request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TransactionCollectionRead&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TransactionCollectionRead>> executeWithHttpInfo() throws ApiException {
            return apiTransactionsGetCollectionWithHttpInfo(page, orderCreatedAt, orderUpdatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, status, status2, offerTitle);
        }

        /**
         * Execute apiTransactionsGetCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TransactionCollectionRead>> _callback) throws ApiException {
            return apiTransactionsGetCollectionAsync(page, orderCreatedAt, orderUpdatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, status, status2, offerTitle, _callback);
        }
    }

    /**
     * List all Transaction
     * Retrieve a list of Transaction paginated
     * @return APIapiTransactionsGetCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiTransactionsGetCollectionRequest apiTransactionsGetCollection() {
        return new APIapiTransactionsGetCollectionRequest();
    }
    private okhttp3.Call apiTransactionsPostCall(TransactionWrite transactionWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionWrite;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsPostValidateBeforeCall(TransactionWrite transactionWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionWrite' is set
        if (transactionWrite == null) {
            throw new ApiException("Missing the required parameter 'transactionWrite' when calling apiTransactionsPost(Async)");
        }

        return apiTransactionsPostCall(transactionWrite, _callback);

    }


    private ApiResponse<TransactionRead> apiTransactionsPostWithHttpInfo(TransactionWrite transactionWrite) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsPostValidateBeforeCall(transactionWrite, null);
        Type localVarReturnType = new TypeToken<TransactionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiTransactionsPostAsync(TransactionWrite transactionWrite, final ApiCallback<TransactionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsPostValidateBeforeCall(transactionWrite, _callback);
        Type localVarReturnType = new TypeToken<TransactionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiTransactionsPostRequest {
        private final TransactionWrite transactionWrite;

        private APIapiTransactionsPostRequest(TransactionWrite transactionWrite) {
            this.transactionWrite = transactionWrite;
        }

        /**
         * Build call for apiTransactionsPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiTransactionsPostCall(transactionWrite, _callback);
        }

        /**
         * Execute apiTransactionsPost request
         * @return TransactionRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public TransactionRead execute() throws ApiException {
            ApiResponse<TransactionRead> localVarResp = apiTransactionsPostWithHttpInfo(transactionWrite);
            return localVarResp.getData();
        }

        /**
         * Execute apiTransactionsPost request with HTTP info returned
         * @return ApiResponse&lt;TransactionRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionRead> executeWithHttpInfo() throws ApiException {
            return apiTransactionsPostWithHttpInfo(transactionWrite);
        }

        /**
         * Execute apiTransactionsPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionRead> _callback) throws ApiException {
            return apiTransactionsPostAsync(transactionWrite, _callback);
        }
    }

    /**
     * Initialize a new Transaction
     * Create a new Transaction for Preauthorization
     * @param transactionWrite The new Transaction resource (required)
     * @return APIapiTransactionsPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiTransactionsPostRequest apiTransactionsPost(TransactionWrite transactionWrite) {
        return new APIapiTransactionsPostRequest(transactionWrite);
    }
    private okhttp3.Call apiTransactionsUlidGetCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUlidGetValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUlidGet(Async)");
        }

        return apiTransactionsUlidGetCall(ulid, _callback);

    }


    private ApiResponse<TransactionRead> apiTransactionsUlidGetWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUlidGetValidateBeforeCall(ulid, null);
        Type localVarReturnType = new TypeToken<TransactionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiTransactionsUlidGetAsync(String ulid, final ApiCallback<TransactionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUlidGetValidateBeforeCall(ulid, _callback);
        Type localVarReturnType = new TypeToken<TransactionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiTransactionsUlidGetRequest {
        private final String ulid;

        private APIapiTransactionsUlidGetRequest(String ulid) {
            this.ulid = ulid;
        }

        /**
         * Build call for apiTransactionsUlidGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiTransactionsUlidGetCall(ulid, _callback);
        }

        /**
         * Execute apiTransactionsUlidGet request
         * @return TransactionRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public TransactionRead execute() throws ApiException {
            ApiResponse<TransactionRead> localVarResp = apiTransactionsUlidGetWithHttpInfo(ulid);
            return localVarResp.getData();
        }

        /**
         * Execute apiTransactionsUlidGet request with HTTP info returned
         * @return ApiResponse&lt;TransactionRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionRead> executeWithHttpInfo() throws ApiException {
            return apiTransactionsUlidGetWithHttpInfo(ulid);
        }

        /**
         * Execute apiTransactionsUlidGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionRead> _callback) throws ApiException {
            return apiTransactionsUlidGetAsync(ulid, _callback);
        }
    }

    /**
     * Get a Transaction
     * Retrieve a single Transaction by ID
     * @param ulid Transaction identifier (required)
     * @return APIapiTransactionsUlidGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiTransactionsUlidGetRequest apiTransactionsUlidGet(String ulid) {
        return new APIapiTransactionsUlidGetRequest(ulid);
    }
    private okhttp3.Call apiTransactionsUlidPatchCall(String ulid, TransactionUpdate transactionUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionUpdate;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUlidPatchValidateBeforeCall(String ulid, TransactionUpdate transactionUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUlidPatch(Async)");
        }

        // verify the required parameter 'transactionUpdate' is set
        if (transactionUpdate == null) {
            throw new ApiException("Missing the required parameter 'transactionUpdate' when calling apiTransactionsUlidPatch(Async)");
        }

        return apiTransactionsUlidPatchCall(ulid, transactionUpdate, _callback);

    }


    private ApiResponse<TransactionRead> apiTransactionsUlidPatchWithHttpInfo(String ulid, TransactionUpdate transactionUpdate) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUlidPatchValidateBeforeCall(ulid, transactionUpdate, null);
        Type localVarReturnType = new TypeToken<TransactionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiTransactionsUlidPatchAsync(String ulid, TransactionUpdate transactionUpdate, final ApiCallback<TransactionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUlidPatchValidateBeforeCall(ulid, transactionUpdate, _callback);
        Type localVarReturnType = new TypeToken<TransactionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiTransactionsUlidPatchRequest {
        private final String ulid;
        private final TransactionUpdate transactionUpdate;

        private APIapiTransactionsUlidPatchRequest(String ulid, TransactionUpdate transactionUpdate) {
            this.ulid = ulid;
            this.transactionUpdate = transactionUpdate;
        }

        /**
         * Build call for apiTransactionsUlidPatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiTransactionsUlidPatchCall(ulid, transactionUpdate, _callback);
        }

        /**
         * Execute apiTransactionsUlidPatch request
         * @return TransactionRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public TransactionRead execute() throws ApiException {
            ApiResponse<TransactionRead> localVarResp = apiTransactionsUlidPatchWithHttpInfo(ulid, transactionUpdate);
            return localVarResp.getData();
        }

        /**
         * Execute apiTransactionsUlidPatch request with HTTP info returned
         * @return ApiResponse&lt;TransactionRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionRead> executeWithHttpInfo() throws ApiException {
            return apiTransactionsUlidPatchWithHttpInfo(ulid, transactionUpdate);
        }

        /**
         * Execute apiTransactionsUlidPatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionRead> _callback) throws ApiException {
            return apiTransactionsUlidPatchAsync(ulid, transactionUpdate, _callback);
        }
    }

    /**
     * Interact with a Transaction
     * Make decision upon a Transaction in order to make it evolve
     * @param ulid Transaction identifier (required)
     * @param transactionUpdate The updated Transaction resource (required)
     * @return APIapiTransactionsUlidPatchRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiTransactionsUlidPatchRequest apiTransactionsUlidPatch(String ulid, TransactionUpdate transactionUpdate) {
        return new APIapiTransactionsUlidPatchRequest(ulid, transactionUpdate);
    }
}
