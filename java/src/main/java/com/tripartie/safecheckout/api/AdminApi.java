/*
 * Safe Checkout
 * Simple, yet elegant web interfaces for your convenience. One request away from your first secured C2C transaction.
 *
 * The version of the OpenAPI document: 2.0.101
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tripartie.safecheckout.api;

import com.tripartie.safecheckout.ApiCallback;
import com.tripartie.safecheckout.ApiClient;
import com.tripartie.safecheckout.ApiException;
import com.tripartie.safecheckout.ApiResponse;
import com.tripartie.safecheckout.Configuration;
import com.tripartie.safecheckout.Pair;
import com.tripartie.safecheckout.ProgressRequestBody;
import com.tripartie.safecheckout.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.tripartie.safecheckout.model.AccessError;
import com.tripartie.safecheckout.model.ApiClientPostCreationRead;
import com.tripartie.safecheckout.model.ApiClientRead;
import com.tripartie.safecheckout.model.ApiClientWrite;
import com.tripartie.safecheckout.model.AuthError;
import com.tripartie.safecheckout.model.GenericError;
import com.tripartie.safecheckout.model.InvalidQueryError;
import com.tripartie.safecheckout.model.MessageError;
import com.tripartie.safecheckout.model.NotFoundError;
import com.tripartie.safecheckout.model.OrganizationCollectionRead;
import com.tripartie.safecheckout.model.OrganizationRead;
import com.tripartie.safecheckout.model.RateLimitError;
import com.tripartie.safecheckout.model.StatisticRead;
import com.tripartie.safecheckout.model.StatisticWrite;
import com.tripartie.safecheckout.model.UnprocessableEntity;
import com.tripartie.safecheckout.model.UserCollectionRead;
import com.tripartie.safecheckout.model.UserInvite;
import com.tripartie.safecheckout.model.UserJwtCreated;
import com.tripartie.safecheckout.model.UserJwtWrite;
import com.tripartie.safecheckout.model.UserPostRegisterRead;
import com.tripartie.safecheckout.model.UserSupportRead;
import com.tripartie.safecheckout.model.UserUserSubscribed;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call apiApiClientsGetCollectionCall(Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiApiClientsGetCollectionValidateBeforeCall(Integer page, final ApiCallback _callback) throws ApiException {
        return apiApiClientsGetCollectionCall(page, _callback);

    }


    private ApiResponse<List<ApiClientRead>> apiApiClientsGetCollectionWithHttpInfo(Integer page) throws ApiException {
        okhttp3.Call localVarCall = apiApiClientsGetCollectionValidateBeforeCall(page, null);
        Type localVarReturnType = new TypeToken<List<ApiClientRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiApiClientsGetCollectionAsync(Integer page, final ApiCallback<List<ApiClientRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiApiClientsGetCollectionValidateBeforeCall(page, _callback);
        Type localVarReturnType = new TypeToken<List<ApiClientRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiApiClientsGetCollectionRequest {
        private Integer page;

        private APIapiApiClientsGetCollectionRequest() {
        }

        /**
         * Set page
         * @param page The collection page number (optional, default to 1)
         * @return APIapiApiClientsGetCollectionRequest
         */
        public APIapiApiClientsGetCollectionRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for apiApiClientsGetCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> ApiClient collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiApiClientsGetCollectionCall(page, _callback);
        }

        /**
         * Execute apiApiClientsGetCollection request
         * @return List&lt;ApiClientRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> ApiClient collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public List<ApiClientRead> execute() throws ApiException {
            ApiResponse<List<ApiClientRead>> localVarResp = apiApiClientsGetCollectionWithHttpInfo(page);
            return localVarResp.getData();
        }

        /**
         * Execute apiApiClientsGetCollection request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ApiClientRead&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> ApiClient collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ApiClientRead>> executeWithHttpInfo() throws ApiException {
            return apiApiClientsGetCollectionWithHttpInfo(page);
        }

        /**
         * Execute apiApiClientsGetCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> ApiClient collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ApiClientRead>> _callback) throws ApiException {
            return apiApiClientsGetCollectionAsync(page, _callback);
        }
    }

    /**
     * Retrieves the collection of ApiClient resources.
     * Retrieves the collection of ApiClient resources.
     * @return APIapiApiClientsGetCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ApiClient collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiApiClientsGetCollectionRequest apiApiClientsGetCollection() {
        return new APIapiApiClientsGetCollectionRequest();
    }
    private okhttp3.Call apiApiClientsIdentifierDeleteCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-clients/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiApiClientsIdentifierDeleteValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling apiApiClientsIdentifierDelete(Async)");
        }

        return apiApiClientsIdentifierDeleteCall(identifier, _callback);

    }


    private ApiResponse<Void> apiApiClientsIdentifierDeleteWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = apiApiClientsIdentifierDeleteValidateBeforeCall(identifier, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call apiApiClientsIdentifierDeleteAsync(String identifier, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiApiClientsIdentifierDeleteValidateBeforeCall(identifier, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIapiApiClientsIdentifierDeleteRequest {
        private final String identifier;

        private APIapiApiClientsIdentifierDeleteRequest(String identifier) {
            this.identifier = identifier;
        }

        /**
         * Build call for apiApiClientsIdentifierDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> ApiClient resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiApiClientsIdentifierDeleteCall(identifier, _callback);
        }

        /**
         * Execute apiApiClientsIdentifierDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> ApiClient resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            apiApiClientsIdentifierDeleteWithHttpInfo(identifier);
        }

        /**
         * Execute apiApiClientsIdentifierDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> ApiClient resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return apiApiClientsIdentifierDeleteWithHttpInfo(identifier);
        }

        /**
         * Execute apiApiClientsIdentifierDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> ApiClient resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return apiApiClientsIdentifierDeleteAsync(identifier, _callback);
        }
    }

    /**
     * Removes the ApiClient resource.
     * Removes the ApiClient resource.
     * @param identifier ApiClient identifier (required)
     * @return APIapiApiClientsIdentifierDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ApiClient resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiApiClientsIdentifierDeleteRequest apiApiClientsIdentifierDelete(String identifier) {
        return new APIapiApiClientsIdentifierDeleteRequest(identifier);
    }
    private okhttp3.Call apiApiClientsIdentifierGetCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-clients/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiApiClientsIdentifierGetValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling apiApiClientsIdentifierGet(Async)");
        }

        return apiApiClientsIdentifierGetCall(identifier, _callback);

    }


    private ApiResponse<ApiClientRead> apiApiClientsIdentifierGetWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = apiApiClientsIdentifierGetValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<ApiClientRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiApiClientsIdentifierGetAsync(String identifier, final ApiCallback<ApiClientRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiApiClientsIdentifierGetValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<ApiClientRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiApiClientsIdentifierGetRequest {
        private final String identifier;

        private APIapiApiClientsIdentifierGetRequest(String identifier) {
            this.identifier = identifier;
        }

        /**
         * Build call for apiApiClientsIdentifierGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> ApiClient resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiApiClientsIdentifierGetCall(identifier, _callback);
        }

        /**
         * Execute apiApiClientsIdentifierGet request
         * @return ApiClientRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> ApiClient resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiClientRead execute() throws ApiException {
            ApiResponse<ApiClientRead> localVarResp = apiApiClientsIdentifierGetWithHttpInfo(identifier);
            return localVarResp.getData();
        }

        /**
         * Execute apiApiClientsIdentifierGet request with HTTP info returned
         * @return ApiResponse&lt;ApiClientRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> ApiClient resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApiClientRead> executeWithHttpInfo() throws ApiException {
            return apiApiClientsIdentifierGetWithHttpInfo(identifier);
        }

        /**
         * Execute apiApiClientsIdentifierGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> ApiClient resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApiClientRead> _callback) throws ApiException {
            return apiApiClientsIdentifierGetAsync(identifier, _callback);
        }
    }

    /**
     * Retrieves a ApiClient resource.
     * Retrieves a ApiClient resource.
     * @param identifier ApiClient identifier (required)
     * @return APIapiApiClientsIdentifierGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ApiClient resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiApiClientsIdentifierGetRequest apiApiClientsIdentifierGet(String identifier) {
        return new APIapiApiClientsIdentifierGetRequest(identifier);
    }
    private okhttp3.Call apiApiClientsPostCall(ApiClientWrite apiClientWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiClientWrite;

        // create path and map variables
        String localVarPath = "/api-clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiApiClientsPostValidateBeforeCall(ApiClientWrite apiClientWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiClientWrite' is set
        if (apiClientWrite == null) {
            throw new ApiException("Missing the required parameter 'apiClientWrite' when calling apiApiClientsPost(Async)");
        }

        return apiApiClientsPostCall(apiClientWrite, _callback);

    }


    private ApiResponse<ApiClientPostCreationRead> apiApiClientsPostWithHttpInfo(ApiClientWrite apiClientWrite) throws ApiException {
        okhttp3.Call localVarCall = apiApiClientsPostValidateBeforeCall(apiClientWrite, null);
        Type localVarReturnType = new TypeToken<ApiClientPostCreationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiApiClientsPostAsync(ApiClientWrite apiClientWrite, final ApiCallback<ApiClientPostCreationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiApiClientsPostValidateBeforeCall(apiClientWrite, _callback);
        Type localVarReturnType = new TypeToken<ApiClientPostCreationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiApiClientsPostRequest {
        private final ApiClientWrite apiClientWrite;

        private APIapiApiClientsPostRequest(ApiClientWrite apiClientWrite) {
            this.apiClientWrite = apiClientWrite;
        }

        /**
         * Build call for apiApiClientsPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> ApiClient resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiApiClientsPostCall(apiClientWrite, _callback);
        }

        /**
         * Execute apiApiClientsPost request
         * @return ApiClientPostCreationRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> ApiClient resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiClientPostCreationRead execute() throws ApiException {
            ApiResponse<ApiClientPostCreationRead> localVarResp = apiApiClientsPostWithHttpInfo(apiClientWrite);
            return localVarResp.getData();
        }

        /**
         * Execute apiApiClientsPost request with HTTP info returned
         * @return ApiResponse&lt;ApiClientPostCreationRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> ApiClient resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApiClientPostCreationRead> executeWithHttpInfo() throws ApiException {
            return apiApiClientsPostWithHttpInfo(apiClientWrite);
        }

        /**
         * Execute apiApiClientsPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> ApiClient resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApiClientPostCreationRead> _callback) throws ApiException {
            return apiApiClientsPostAsync(apiClientWrite, _callback);
        }
    }

    /**
     * Creates a ApiClient resource.
     * Creates a ApiClient resource.
     * @param apiClientWrite The new ApiClient resource (required)
     * @return APIapiApiClientsPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> ApiClient resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiApiClientsPostRequest apiApiClientsPost(ApiClientWrite apiClientWrite) {
        return new APIapiApiClientsPostRequest(apiClientWrite);
    }
    private okhttp3.Call apiInvitePostCall(UserInvite userInvite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userInvite;

        // create path and map variables
        String localVarPath = "/invite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiInvitePostValidateBeforeCall(UserInvite userInvite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userInvite' is set
        if (userInvite == null) {
            throw new ApiException("Missing the required parameter 'userInvite' when calling apiInvitePost(Async)");
        }

        return apiInvitePostCall(userInvite, _callback);

    }


    private ApiResponse<UserPostRegisterRead> apiInvitePostWithHttpInfo(UserInvite userInvite) throws ApiException {
        okhttp3.Call localVarCall = apiInvitePostValidateBeforeCall(userInvite, null);
        Type localVarReturnType = new TypeToken<UserPostRegisterRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiInvitePostAsync(UserInvite userInvite, final ApiCallback<UserPostRegisterRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiInvitePostValidateBeforeCall(userInvite, _callback);
        Type localVarReturnType = new TypeToken<UserPostRegisterRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiInvitePostRequest {
        private final UserInvite userInvite;

        private APIapiInvitePostRequest(UserInvite userInvite) {
            this.userInvite = userInvite;
        }

        /**
         * Build call for apiInvitePost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> User resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiInvitePostCall(userInvite, _callback);
        }

        /**
         * Execute apiInvitePost request
         * @return UserPostRegisterRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> User resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public UserPostRegisterRead execute() throws ApiException {
            ApiResponse<UserPostRegisterRead> localVarResp = apiInvitePostWithHttpInfo(userInvite);
            return localVarResp.getData();
        }

        /**
         * Execute apiInvitePost request with HTTP info returned
         * @return ApiResponse&lt;UserPostRegisterRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> User resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserPostRegisterRead> executeWithHttpInfo() throws ApiException {
            return apiInvitePostWithHttpInfo(userInvite);
        }

        /**
         * Execute apiInvitePost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> User resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserPostRegisterRead> _callback) throws ApiException {
            return apiInvitePostAsync(userInvite, _callback);
        }
    }

    /**
     * Organization invite
     * Invite a user to your organization workspace
     * @param userInvite The new User resource (required)
     * @return APIapiInvitePostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiInvitePostRequest apiInvitePost(UserInvite userInvite) {
        return new APIapiInvitePostRequest(userInvite);
    }
    private okhttp3.Call apiOrganizationsGetCollectionCall(Integer page, Integer itemsPerPage, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (itemsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemsPerPage", itemsPerPage));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOrganizationsGetCollectionValidateBeforeCall(Integer page, Integer itemsPerPage, String name, final ApiCallback _callback) throws ApiException {
        return apiOrganizationsGetCollectionCall(page, itemsPerPage, name, _callback);

    }


    private ApiResponse<List<OrganizationCollectionRead>> apiOrganizationsGetCollectionWithHttpInfo(Integer page, Integer itemsPerPage, String name) throws ApiException {
        okhttp3.Call localVarCall = apiOrganizationsGetCollectionValidateBeforeCall(page, itemsPerPage, name, null);
        Type localVarReturnType = new TypeToken<List<OrganizationCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiOrganizationsGetCollectionAsync(Integer page, Integer itemsPerPage, String name, final ApiCallback<List<OrganizationCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOrganizationsGetCollectionValidateBeforeCall(page, itemsPerPage, name, _callback);
        Type localVarReturnType = new TypeToken<List<OrganizationCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiOrganizationsGetCollectionRequest {
        private Integer page;
        private Integer itemsPerPage;
        private String name;

        private APIapiOrganizationsGetCollectionRequest() {
        }

        /**
         * Set page
         * @param page The collection page number (optional, default to 1)
         * @return APIapiOrganizationsGetCollectionRequest
         */
        public APIapiOrganizationsGetCollectionRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set itemsPerPage
         * @param itemsPerPage The number of items per page (optional, default to 30)
         * @return APIapiOrganizationsGetCollectionRequest
         */
        public APIapiOrganizationsGetCollectionRequest itemsPerPage(Integer itemsPerPage) {
            this.itemsPerPage = itemsPerPage;
            return this;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return APIapiOrganizationsGetCollectionRequest
         */
        public APIapiOrganizationsGetCollectionRequest name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Build call for apiOrganizationsGetCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Organization collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiOrganizationsGetCollectionCall(page, itemsPerPage, name, _callback);
        }

        /**
         * Execute apiOrganizationsGetCollection request
         * @return List&lt;OrganizationCollectionRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Organization collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public List<OrganizationCollectionRead> execute() throws ApiException {
            ApiResponse<List<OrganizationCollectionRead>> localVarResp = apiOrganizationsGetCollectionWithHttpInfo(page, itemsPerPage, name);
            return localVarResp.getData();
        }

        /**
         * Execute apiOrganizationsGetCollection request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OrganizationCollectionRead&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Organization collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OrganizationCollectionRead>> executeWithHttpInfo() throws ApiException {
            return apiOrganizationsGetCollectionWithHttpInfo(page, itemsPerPage, name);
        }

        /**
         * Execute apiOrganizationsGetCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Organization collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OrganizationCollectionRead>> _callback) throws ApiException {
            return apiOrganizationsGetCollectionAsync(page, itemsPerPage, name, _callback);
        }
    }

    /**
     * Retrieves the collection of Organization resources.
     * Retrieves the collection of Organization resources.
     * @return APIapiOrganizationsGetCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiOrganizationsGetCollectionRequest apiOrganizationsGetCollection() {
        return new APIapiOrganizationsGetCollectionRequest();
    }
    private okhttp3.Call apiOrganizationsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOrganizationsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiOrganizationsIdGet(Async)");
        }

        return apiOrganizationsIdGetCall(id, _callback);

    }


    private ApiResponse<OrganizationRead> apiOrganizationsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiOrganizationsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OrganizationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiOrganizationsIdGetAsync(String id, final ApiCallback<OrganizationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOrganizationsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OrganizationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiOrganizationsIdGetRequest {
        private final String id;

        private APIapiOrganizationsIdGetRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for apiOrganizationsIdGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Organization resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiOrganizationsIdGetCall(id, _callback);
        }

        /**
         * Execute apiOrganizationsIdGet request
         * @return OrganizationRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Organization resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationRead execute() throws ApiException {
            ApiResponse<OrganizationRead> localVarResp = apiOrganizationsIdGetWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute apiOrganizationsIdGet request with HTTP info returned
         * @return ApiResponse&lt;OrganizationRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Organization resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationRead> executeWithHttpInfo() throws ApiException {
            return apiOrganizationsIdGetWithHttpInfo(id);
        }

        /**
         * Execute apiOrganizationsIdGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Organization resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationRead> _callback) throws ApiException {
            return apiOrganizationsIdGetAsync(id, _callback);
        }
    }

    /**
     * Retrieves a Organization resource.
     * Retrieves a Organization resource.
     * @param id Organization identifier (required)
     * @return APIapiOrganizationsIdGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiOrganizationsIdGetRequest apiOrganizationsIdGet(String id) {
        return new APIapiOrganizationsIdGetRequest(id);
    }
    private okhttp3.Call apiUsersGetCollectionCall(Integer page, Boolean existsOrganization, Boolean existsIdentityVerifiedAt, Boolean existsMainAddress, String orderCreatedAt, String email, List<String> email2, String intlPhoneNumber, String firstName, String lastName, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String identityVerifiedAtBefore, String identityVerifiedAtStrictlyBefore, String identityVerifiedAtAfter, String identityVerifiedAtStrictlyAfter, String updatedAtBefore, String updatedAtStrictlyBefore, String updatedAtAfter, String updatedAtStrictlyAfter, String birthdayBefore, String birthdayStrictlyBefore, String birthdayAfter, String birthdayStrictlyAfter, Boolean totpEnabled, Boolean lockdown, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (existsOrganization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exists[organization]", existsOrganization));
        }

        if (existsIdentityVerifiedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exists[identityVerifiedAt]", existsIdentityVerifiedAt));
        }

        if (existsMainAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exists[mainAddress]", existsMainAddress));
        }

        if (orderCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[createdAt]", orderCreatedAt));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (email2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "email[]", email2));
        }

        if (intlPhoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intlPhoneNumber", intlPhoneNumber));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[before]", createdAtBefore));
        }

        if (createdAtStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_before]", createdAtStrictlyBefore));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[after]", createdAtAfter));
        }

        if (createdAtStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_after]", createdAtStrictlyAfter));
        }

        if (identityVerifiedAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identityVerifiedAt[before]", identityVerifiedAtBefore));
        }

        if (identityVerifiedAtStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identityVerifiedAt[strictly_before]", identityVerifiedAtStrictlyBefore));
        }

        if (identityVerifiedAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identityVerifiedAt[after]", identityVerifiedAtAfter));
        }

        if (identityVerifiedAtStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identityVerifiedAt[strictly_after]", identityVerifiedAtStrictlyAfter));
        }

        if (updatedAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[before]", updatedAtBefore));
        }

        if (updatedAtStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[strictly_before]", updatedAtStrictlyBefore));
        }

        if (updatedAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[after]", updatedAtAfter));
        }

        if (updatedAtStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[strictly_after]", updatedAtStrictlyAfter));
        }

        if (birthdayBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("birthday[before]", birthdayBefore));
        }

        if (birthdayStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("birthday[strictly_before]", birthdayStrictlyBefore));
        }

        if (birthdayAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("birthday[after]", birthdayAfter));
        }

        if (birthdayStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("birthday[strictly_after]", birthdayStrictlyAfter));
        }

        if (totpEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("totpEnabled", totpEnabled));
        }

        if (lockdown != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lockdown", lockdown));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsersGetCollectionValidateBeforeCall(Integer page, Boolean existsOrganization, Boolean existsIdentityVerifiedAt, Boolean existsMainAddress, String orderCreatedAt, String email, List<String> email2, String intlPhoneNumber, String firstName, String lastName, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String identityVerifiedAtBefore, String identityVerifiedAtStrictlyBefore, String identityVerifiedAtAfter, String identityVerifiedAtStrictlyAfter, String updatedAtBefore, String updatedAtStrictlyBefore, String updatedAtAfter, String updatedAtStrictlyAfter, String birthdayBefore, String birthdayStrictlyBefore, String birthdayAfter, String birthdayStrictlyAfter, Boolean totpEnabled, Boolean lockdown, final ApiCallback _callback) throws ApiException {
        return apiUsersGetCollectionCall(page, existsOrganization, existsIdentityVerifiedAt, existsMainAddress, orderCreatedAt, email, email2, intlPhoneNumber, firstName, lastName, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, identityVerifiedAtBefore, identityVerifiedAtStrictlyBefore, identityVerifiedAtAfter, identityVerifiedAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, birthdayBefore, birthdayStrictlyBefore, birthdayAfter, birthdayStrictlyAfter, totpEnabled, lockdown, _callback);

    }


    private ApiResponse<List<UserCollectionRead>> apiUsersGetCollectionWithHttpInfo(Integer page, Boolean existsOrganization, Boolean existsIdentityVerifiedAt, Boolean existsMainAddress, String orderCreatedAt, String email, List<String> email2, String intlPhoneNumber, String firstName, String lastName, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String identityVerifiedAtBefore, String identityVerifiedAtStrictlyBefore, String identityVerifiedAtAfter, String identityVerifiedAtStrictlyAfter, String updatedAtBefore, String updatedAtStrictlyBefore, String updatedAtAfter, String updatedAtStrictlyAfter, String birthdayBefore, String birthdayStrictlyBefore, String birthdayAfter, String birthdayStrictlyAfter, Boolean totpEnabled, Boolean lockdown) throws ApiException {
        okhttp3.Call localVarCall = apiUsersGetCollectionValidateBeforeCall(page, existsOrganization, existsIdentityVerifiedAt, existsMainAddress, orderCreatedAt, email, email2, intlPhoneNumber, firstName, lastName, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, identityVerifiedAtBefore, identityVerifiedAtStrictlyBefore, identityVerifiedAtAfter, identityVerifiedAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, birthdayBefore, birthdayStrictlyBefore, birthdayAfter, birthdayStrictlyAfter, totpEnabled, lockdown, null);
        Type localVarReturnType = new TypeToken<List<UserCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiUsersGetCollectionAsync(Integer page, Boolean existsOrganization, Boolean existsIdentityVerifiedAt, Boolean existsMainAddress, String orderCreatedAt, String email, List<String> email2, String intlPhoneNumber, String firstName, String lastName, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String identityVerifiedAtBefore, String identityVerifiedAtStrictlyBefore, String identityVerifiedAtAfter, String identityVerifiedAtStrictlyAfter, String updatedAtBefore, String updatedAtStrictlyBefore, String updatedAtAfter, String updatedAtStrictlyAfter, String birthdayBefore, String birthdayStrictlyBefore, String birthdayAfter, String birthdayStrictlyAfter, Boolean totpEnabled, Boolean lockdown, final ApiCallback<List<UserCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsersGetCollectionValidateBeforeCall(page, existsOrganization, existsIdentityVerifiedAt, existsMainAddress, orderCreatedAt, email, email2, intlPhoneNumber, firstName, lastName, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, identityVerifiedAtBefore, identityVerifiedAtStrictlyBefore, identityVerifiedAtAfter, identityVerifiedAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, birthdayBefore, birthdayStrictlyBefore, birthdayAfter, birthdayStrictlyAfter, totpEnabled, lockdown, _callback);
        Type localVarReturnType = new TypeToken<List<UserCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiUsersGetCollectionRequest {
        private Integer page;
        private Boolean existsOrganization;
        private Boolean existsIdentityVerifiedAt;
        private Boolean existsMainAddress;
        private String orderCreatedAt;
        private String email;
        private List<String> email2;
        private String intlPhoneNumber;
        private String firstName;
        private String lastName;
        private String createdAtBefore;
        private String createdAtStrictlyBefore;
        private String createdAtAfter;
        private String createdAtStrictlyAfter;
        private String identityVerifiedAtBefore;
        private String identityVerifiedAtStrictlyBefore;
        private String identityVerifiedAtAfter;
        private String identityVerifiedAtStrictlyAfter;
        private String updatedAtBefore;
        private String updatedAtStrictlyBefore;
        private String updatedAtAfter;
        private String updatedAtStrictlyAfter;
        private String birthdayBefore;
        private String birthdayStrictlyBefore;
        private String birthdayAfter;
        private String birthdayStrictlyAfter;
        private Boolean totpEnabled;
        private Boolean lockdown;

        private APIapiUsersGetCollectionRequest() {
        }

        /**
         * Set page
         * @param page The collection page number (optional, default to 1)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set existsOrganization
         * @param existsOrganization  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest existsOrganization(Boolean existsOrganization) {
            this.existsOrganization = existsOrganization;
            return this;
        }

        /**
         * Set existsIdentityVerifiedAt
         * @param existsIdentityVerifiedAt  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest existsIdentityVerifiedAt(Boolean existsIdentityVerifiedAt) {
            this.existsIdentityVerifiedAt = existsIdentityVerifiedAt;
            return this;
        }

        /**
         * Set existsMainAddress
         * @param existsMainAddress  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest existsMainAddress(Boolean existsMainAddress) {
            this.existsMainAddress = existsMainAddress;
            return this;
        }

        /**
         * Set orderCreatedAt
         * @param orderCreatedAt  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest orderCreatedAt(String orderCreatedAt) {
            this.orderCreatedAt = orderCreatedAt;
            return this;
        }

        /**
         * Set email
         * @param email  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest email(String email) {
            this.email = email;
            return this;
        }

        /**
         * Set email2
         * @param email2  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest email2(List<String> email2) {
            this.email2 = email2;
            return this;
        }

        /**
         * Set intlPhoneNumber
         * @param intlPhoneNumber  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest intlPhoneNumber(String intlPhoneNumber) {
            this.intlPhoneNumber = intlPhoneNumber;
            return this;
        }

        /**
         * Set firstName
         * @param firstName  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }

        /**
         * Set lastName
         * @param lastName  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }

        /**
         * Set createdAtBefore
         * @param createdAtBefore  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest createdAtBefore(String createdAtBefore) {
            this.createdAtBefore = createdAtBefore;
            return this;
        }

        /**
         * Set createdAtStrictlyBefore
         * @param createdAtStrictlyBefore  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest createdAtStrictlyBefore(String createdAtStrictlyBefore) {
            this.createdAtStrictlyBefore = createdAtStrictlyBefore;
            return this;
        }

        /**
         * Set createdAtAfter
         * @param createdAtAfter  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest createdAtAfter(String createdAtAfter) {
            this.createdAtAfter = createdAtAfter;
            return this;
        }

        /**
         * Set createdAtStrictlyAfter
         * @param createdAtStrictlyAfter  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest createdAtStrictlyAfter(String createdAtStrictlyAfter) {
            this.createdAtStrictlyAfter = createdAtStrictlyAfter;
            return this;
        }

        /**
         * Set identityVerifiedAtBefore
         * @param identityVerifiedAtBefore  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest identityVerifiedAtBefore(String identityVerifiedAtBefore) {
            this.identityVerifiedAtBefore = identityVerifiedAtBefore;
            return this;
        }

        /**
         * Set identityVerifiedAtStrictlyBefore
         * @param identityVerifiedAtStrictlyBefore  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest identityVerifiedAtStrictlyBefore(String identityVerifiedAtStrictlyBefore) {
            this.identityVerifiedAtStrictlyBefore = identityVerifiedAtStrictlyBefore;
            return this;
        }

        /**
         * Set identityVerifiedAtAfter
         * @param identityVerifiedAtAfter  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest identityVerifiedAtAfter(String identityVerifiedAtAfter) {
            this.identityVerifiedAtAfter = identityVerifiedAtAfter;
            return this;
        }

        /**
         * Set identityVerifiedAtStrictlyAfter
         * @param identityVerifiedAtStrictlyAfter  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest identityVerifiedAtStrictlyAfter(String identityVerifiedAtStrictlyAfter) {
            this.identityVerifiedAtStrictlyAfter = identityVerifiedAtStrictlyAfter;
            return this;
        }

        /**
         * Set updatedAtBefore
         * @param updatedAtBefore  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest updatedAtBefore(String updatedAtBefore) {
            this.updatedAtBefore = updatedAtBefore;
            return this;
        }

        /**
         * Set updatedAtStrictlyBefore
         * @param updatedAtStrictlyBefore  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest updatedAtStrictlyBefore(String updatedAtStrictlyBefore) {
            this.updatedAtStrictlyBefore = updatedAtStrictlyBefore;
            return this;
        }

        /**
         * Set updatedAtAfter
         * @param updatedAtAfter  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest updatedAtAfter(String updatedAtAfter) {
            this.updatedAtAfter = updatedAtAfter;
            return this;
        }

        /**
         * Set updatedAtStrictlyAfter
         * @param updatedAtStrictlyAfter  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest updatedAtStrictlyAfter(String updatedAtStrictlyAfter) {
            this.updatedAtStrictlyAfter = updatedAtStrictlyAfter;
            return this;
        }

        /**
         * Set birthdayBefore
         * @param birthdayBefore  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest birthdayBefore(String birthdayBefore) {
            this.birthdayBefore = birthdayBefore;
            return this;
        }

        /**
         * Set birthdayStrictlyBefore
         * @param birthdayStrictlyBefore  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest birthdayStrictlyBefore(String birthdayStrictlyBefore) {
            this.birthdayStrictlyBefore = birthdayStrictlyBefore;
            return this;
        }

        /**
         * Set birthdayAfter
         * @param birthdayAfter  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest birthdayAfter(String birthdayAfter) {
            this.birthdayAfter = birthdayAfter;
            return this;
        }

        /**
         * Set birthdayStrictlyAfter
         * @param birthdayStrictlyAfter  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest birthdayStrictlyAfter(String birthdayStrictlyAfter) {
            this.birthdayStrictlyAfter = birthdayStrictlyAfter;
            return this;
        }

        /**
         * Set totpEnabled
         * @param totpEnabled  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest totpEnabled(Boolean totpEnabled) {
            this.totpEnabled = totpEnabled;
            return this;
        }

        /**
         * Set lockdown
         * @param lockdown  (optional)
         * @return APIapiUsersGetCollectionRequest
         */
        public APIapiUsersGetCollectionRequest lockdown(Boolean lockdown) {
            this.lockdown = lockdown;
            return this;
        }

        /**
         * Build call for apiUsersGetCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiUsersGetCollectionCall(page, existsOrganization, existsIdentityVerifiedAt, existsMainAddress, orderCreatedAt, email, email2, intlPhoneNumber, firstName, lastName, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, identityVerifiedAtBefore, identityVerifiedAtStrictlyBefore, identityVerifiedAtAfter, identityVerifiedAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, birthdayBefore, birthdayStrictlyBefore, birthdayAfter, birthdayStrictlyAfter, totpEnabled, lockdown, _callback);
        }

        /**
         * Execute apiUsersGetCollection request
         * @return List&lt;UserCollectionRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public List<UserCollectionRead> execute() throws ApiException {
            ApiResponse<List<UserCollectionRead>> localVarResp = apiUsersGetCollectionWithHttpInfo(page, existsOrganization, existsIdentityVerifiedAt, existsMainAddress, orderCreatedAt, email, email2, intlPhoneNumber, firstName, lastName, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, identityVerifiedAtBefore, identityVerifiedAtStrictlyBefore, identityVerifiedAtAfter, identityVerifiedAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, birthdayBefore, birthdayStrictlyBefore, birthdayAfter, birthdayStrictlyAfter, totpEnabled, lockdown);
            return localVarResp.getData();
        }

        /**
         * Execute apiUsersGetCollection request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UserCollectionRead&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UserCollectionRead>> executeWithHttpInfo() throws ApiException {
            return apiUsersGetCollectionWithHttpInfo(page, existsOrganization, existsIdentityVerifiedAt, existsMainAddress, orderCreatedAt, email, email2, intlPhoneNumber, firstName, lastName, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, identityVerifiedAtBefore, identityVerifiedAtStrictlyBefore, identityVerifiedAtAfter, identityVerifiedAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, birthdayBefore, birthdayStrictlyBefore, birthdayAfter, birthdayStrictlyAfter, totpEnabled, lockdown);
        }

        /**
         * Execute apiUsersGetCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UserCollectionRead>> _callback) throws ApiException {
            return apiUsersGetCollectionAsync(page, existsOrganization, existsIdentityVerifiedAt, existsMainAddress, orderCreatedAt, email, email2, intlPhoneNumber, firstName, lastName, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, identityVerifiedAtBefore, identityVerifiedAtStrictlyBefore, identityVerifiedAtAfter, identityVerifiedAtStrictlyAfter, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, birthdayBefore, birthdayStrictlyBefore, birthdayAfter, birthdayStrictlyAfter, totpEnabled, lockdown, _callback);
        }
    }

    /**
     * Retrieves the collection of User resources.
     * Retrieves the collection of User resources.
     * @return APIapiUsersGetCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiUsersGetCollectionRequest apiUsersGetCollection() {
        return new APIapiUsersGetCollectionRequest();
    }
    private okhttp3.Call apiUsersIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsersIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiUsersIdGet(Async)");
        }

        return apiUsersIdGetCall(id, _callback);

    }


    private ApiResponse<UserSupportRead> apiUsersIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiUsersIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UserSupportRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiUsersIdGetAsync(String id, final ApiCallback<UserSupportRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsersIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UserSupportRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiUsersIdGetRequest {
        private final String id;

        private APIapiUsersIdGetRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for apiUsersIdGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiUsersIdGetCall(id, _callback);
        }

        /**
         * Execute apiUsersIdGet request
         * @return UserSupportRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public UserSupportRead execute() throws ApiException {
            ApiResponse<UserSupportRead> localVarResp = apiUsersIdGetWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute apiUsersIdGet request with HTTP info returned
         * @return ApiResponse&lt;UserSupportRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserSupportRead> executeWithHttpInfo() throws ApiException {
            return apiUsersIdGetWithHttpInfo(id);
        }

        /**
         * Execute apiUsersIdGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserSupportRead> _callback) throws ApiException {
            return apiUsersIdGetAsync(id, _callback);
        }
    }

    /**
     * Retrieves a User resource.
     * Retrieves a User resource.
     * @param id User identifier (required)
     * @return APIapiUsersIdGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiUsersIdGetRequest apiUsersIdGet(String id) {
        return new APIapiUsersIdGetRequest(id);
    }
    private okhttp3.Call apiUsersIddisablePatchCall(String id, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/users/{id}/disable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsersIddisablePatchValidateBeforeCall(String id, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiUsersIddisablePatch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiUsersIddisablePatch(Async)");
        }

        return apiUsersIddisablePatchCall(id, body, _callback);

    }


    private ApiResponse<UserUserSubscribed> apiUsersIddisablePatchWithHttpInfo(String id, Object body) throws ApiException {
        okhttp3.Call localVarCall = apiUsersIddisablePatchValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<UserUserSubscribed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiUsersIddisablePatchAsync(String id, Object body, final ApiCallback<UserUserSubscribed> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsersIddisablePatchValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<UserUserSubscribed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiUsersIddisablePatchRequest {
        private final String id;
        private final Object body;

        private APIapiUsersIddisablePatchRequest(String id, Object body) {
            this.id = id;
            this.body = body;
        }

        /**
         * Build call for apiUsersIddisablePatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiUsersIddisablePatchCall(id, body, _callback);
        }

        /**
         * Execute apiUsersIddisablePatch request
         * @return UserUserSubscribed
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public UserUserSubscribed execute() throws ApiException {
            ApiResponse<UserUserSubscribed> localVarResp = apiUsersIddisablePatchWithHttpInfo(id, body);
            return localVarResp.getData();
        }

        /**
         * Execute apiUsersIddisablePatch request with HTTP info returned
         * @return ApiResponse&lt;UserUserSubscribed&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserUserSubscribed> executeWithHttpInfo() throws ApiException {
            return apiUsersIddisablePatchWithHttpInfo(id, body);
        }

        /**
         * Execute apiUsersIddisablePatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserUserSubscribed> _callback) throws ApiException {
            return apiUsersIddisablePatchAsync(id, body, _callback);
        }
    }

    /**
     * Updates the User resource.
     * Updates the User resource.
     * @param id User identifier (required)
     * @param body The updated User resource (required)
     * @return APIapiUsersIddisablePatchRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiUsersIddisablePatchRequest apiUsersIddisablePatch(String id, Object body) {
        return new APIapiUsersIddisablePatchRequest(id, body);
    }
    private okhttp3.Call apiUsersIdenablePatchCall(String id, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/users/{id}/enable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsersIdenablePatchValidateBeforeCall(String id, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiUsersIdenablePatch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiUsersIdenablePatch(Async)");
        }

        return apiUsersIdenablePatchCall(id, body, _callback);

    }


    private ApiResponse<UserUserSubscribed> apiUsersIdenablePatchWithHttpInfo(String id, Object body) throws ApiException {
        okhttp3.Call localVarCall = apiUsersIdenablePatchValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<UserUserSubscribed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiUsersIdenablePatchAsync(String id, Object body, final ApiCallback<UserUserSubscribed> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsersIdenablePatchValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<UserUserSubscribed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiUsersIdenablePatchRequest {
        private final String id;
        private final Object body;

        private APIapiUsersIdenablePatchRequest(String id, Object body) {
            this.id = id;
            this.body = body;
        }

        /**
         * Build call for apiUsersIdenablePatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiUsersIdenablePatchCall(id, body, _callback);
        }

        /**
         * Execute apiUsersIdenablePatch request
         * @return UserUserSubscribed
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public UserUserSubscribed execute() throws ApiException {
            ApiResponse<UserUserSubscribed> localVarResp = apiUsersIdenablePatchWithHttpInfo(id, body);
            return localVarResp.getData();
        }

        /**
         * Execute apiUsersIdenablePatch request with HTTP info returned
         * @return ApiResponse&lt;UserUserSubscribed&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserUserSubscribed> executeWithHttpInfo() throws ApiException {
            return apiUsersIdenablePatchWithHttpInfo(id, body);
        }

        /**
         * Execute apiUsersIdenablePatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserUserSubscribed> _callback) throws ApiException {
            return apiUsersIdenablePatchAsync(id, body, _callback);
        }
    }

    /**
     * Updates the User resource.
     * Updates the User resource.
     * @param id User identifier (required)
     * @param body The updated User resource (required)
     * @return APIapiUsersIdenablePatchRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiUsersIdenablePatchRequest apiUsersIdenablePatch(String id, Object body) {
        return new APIapiUsersIdenablePatchRequest(id, body);
    }
    private okhttp3.Call authenticationPost_0Call(UserJwtWrite userJwtWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userJwtWrite;

        // create path and map variables
        String localVarPath = "/authentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authenticationPost_0ValidateBeforeCall(UserJwtWrite userJwtWrite, final ApiCallback _callback) throws ApiException {
        return authenticationPost_0Call(userJwtWrite, _callback);

    }


    private ApiResponse<UserJwtCreated> authenticationPost_0WithHttpInfo(UserJwtWrite userJwtWrite) throws ApiException {
        okhttp3.Call localVarCall = authenticationPost_0ValidateBeforeCall(userJwtWrite, null);
        Type localVarReturnType = new TypeToken<UserJwtCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call authenticationPost_0Async(UserJwtWrite userJwtWrite, final ApiCallback<UserJwtCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = authenticationPost_0ValidateBeforeCall(userJwtWrite, _callback);
        Type localVarReturnType = new TypeToken<UserJwtCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIauthenticationPost_0Request {
        private UserJwtWrite userJwtWrite;

        private APIauthenticationPost_0Request() {
        }

        /**
         * Set userJwtWrite
         * @param userJwtWrite  (optional)
         * @return APIauthenticationPost_0Request
         */
        public APIauthenticationPost_0Request userJwtWrite(UserJwtWrite userJwtWrite) {
            this.userJwtWrite = userJwtWrite;
            return this;
        }

        /**
         * Build call for authenticationPost_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return authenticationPost_0Call(userJwtWrite, _callback);
        }

        /**
         * Execute authenticationPost_0 request
         * @return UserJwtCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public UserJwtCreated execute() throws ApiException {
            ApiResponse<UserJwtCreated> localVarResp = authenticationPost_0WithHttpInfo(userJwtWrite);
            return localVarResp.getData();
        }

        /**
         * Execute authenticationPost_0 request with HTTP info returned
         * @return ApiResponse&lt;UserJwtCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserJwtCreated> executeWithHttpInfo() throws ApiException {
            return authenticationPost_0WithHttpInfo(userJwtWrite);
        }

        /**
         * Execute authenticationPost_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserJwtCreated> _callback) throws ApiException {
            return authenticationPost_0Async(userJwtWrite, _callback);
        }
    }

    /**
     * User authentication
     * This endpoint is protected by a captcha, do not try to use it to consume our API. IP/CIDR to be banned upon fraudulent/irregular usage. Follow the oauth 2.0 authentication challenge as described in the documentation.
     * @return APIauthenticationPost_0Request
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIauthenticationPost_0Request authenticationPost_0() {
        return new APIauthenticationPost_0Request();
    }
    private okhttp3.Call statisticsPost_0Call(StatisticWrite statisticWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statisticWrite;

        // create path and map variables
        String localVarPath = "/statistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statisticsPost_0ValidateBeforeCall(StatisticWrite statisticWrite, final ApiCallback _callback) throws ApiException {
        return statisticsPost_0Call(statisticWrite, _callback);

    }


    private ApiResponse<StatisticRead> statisticsPost_0WithHttpInfo(StatisticWrite statisticWrite) throws ApiException {
        okhttp3.Call localVarCall = statisticsPost_0ValidateBeforeCall(statisticWrite, null);
        Type localVarReturnType = new TypeToken<StatisticRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call statisticsPost_0Async(StatisticWrite statisticWrite, final ApiCallback<StatisticRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = statisticsPost_0ValidateBeforeCall(statisticWrite, _callback);
        Type localVarReturnType = new TypeToken<StatisticRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIstatisticsPost_0Request {
        private StatisticWrite statisticWrite;

        private APIstatisticsPost_0Request() {
        }

        /**
         * Set statisticWrite
         * @param statisticWrite  (optional)
         * @return APIstatisticsPost_0Request
         */
        public APIstatisticsPost_0Request statisticWrite(StatisticWrite statisticWrite) {
            this.statisticWrite = statisticWrite;
            return this;
        }

        /**
         * Build call for statisticsPost_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return statisticsPost_0Call(statisticWrite, _callback);
        }

        /**
         * Execute statisticsPost_0 request
         * @return StatisticRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public StatisticRead execute() throws ApiException {
            ApiResponse<StatisticRead> localVarResp = statisticsPost_0WithHttpInfo(statisticWrite);
            return localVarResp.getData();
        }

        /**
         * Execute statisticsPost_0 request with HTTP info returned
         * @return ApiResponse&lt;StatisticRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatisticRead> executeWithHttpInfo() throws ApiException {
            return statisticsPost_0WithHttpInfo(statisticWrite);
        }

        /**
         * Execute statisticsPost_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatisticRead> _callback) throws ApiException {
            return statisticsPost_0Async(statisticWrite, _callback);
        }
    }

    /**
     * Statistics Generator
     * Generate statistics based on a set of parameters.
     * @return APIstatisticsPost_0Request
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIstatisticsPost_0Request statisticsPost_0() {
        return new APIstatisticsPost_0Request();
    }
}
