/*
 * Safe Checkout
 * Simple, yet elegant web interfaces for your convenience. One request away from your first secured C2C transaction.
 *
 * The version of the OpenAPI document: 2.0.57
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tripartie.safecheckout.api;

import com.tripartie.safecheckout.ApiCallback;
import com.tripartie.safecheckout.ApiClient;
import com.tripartie.safecheckout.ApiException;
import com.tripartie.safecheckout.ApiResponse;
import com.tripartie.safecheckout.Configuration;
import com.tripartie.safecheckout.Pair;
import com.tripartie.safecheckout.ProgressRequestBody;
import com.tripartie.safecheckout.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.tripartie.safecheckout.model.AccessError;
import com.tripartie.safecheckout.model.AuthError;
import com.tripartie.safecheckout.model.GenericError;
import com.tripartie.safecheckout.model.InvalidQueryError;
import com.tripartie.safecheckout.model.NotFoundError;
import com.tripartie.safecheckout.model.PersonaCollectionRead;
import com.tripartie.safecheckout.model.PersonaRead;
import com.tripartie.safecheckout.model.PersonaUpdate;
import com.tripartie.safecheckout.model.PersonaWrite;
import com.tripartie.safecheckout.model.RateLimitError;
import com.tripartie.safecheckout.model.UnprocessableEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PersonaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call apiPersonasGetCollectionCall(Integer page, String firstName, String lastName, String email, List<String> email2, String mobilePhoneNumber, List<String> mobilePhoneNumber2, String gender, List<String> gender2, String orderCreatedAt, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String dateOfBirthBefore, String dateOfBirthStrictlyBefore, String dateOfBirthAfter, String dateOfBirthStrictlyAfter, List<String> metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (email2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "email[]", email2));
        }

        if (mobilePhoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mobilePhoneNumber", mobilePhoneNumber));
        }

        if (mobilePhoneNumber2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mobilePhoneNumber[]", mobilePhoneNumber2));
        }

        if (gender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gender", gender));
        }

        if (gender2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "gender[]", gender2));
        }

        if (orderCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[createdAt]", orderCreatedAt));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[before]", createdAtBefore));
        }

        if (createdAtStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_before]", createdAtStrictlyBefore));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[after]", createdAtAfter));
        }

        if (createdAtStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_after]", createdAtStrictlyAfter));
        }

        if (dateOfBirthBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfBirth[before]", dateOfBirthBefore));
        }

        if (dateOfBirthStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfBirth[strictly_before]", dateOfBirthStrictlyBefore));
        }

        if (dateOfBirthAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfBirth[after]", dateOfBirthAfter));
        }

        if (dateOfBirthStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfBirth[strictly_after]", dateOfBirthStrictlyAfter));
        }

        if (metadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "metadata[]", metadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonasGetCollectionValidateBeforeCall(Integer page, String firstName, String lastName, String email, List<String> email2, String mobilePhoneNumber, List<String> mobilePhoneNumber2, String gender, List<String> gender2, String orderCreatedAt, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String dateOfBirthBefore, String dateOfBirthStrictlyBefore, String dateOfBirthAfter, String dateOfBirthStrictlyAfter, List<String> metadata, final ApiCallback _callback) throws ApiException {
        return apiPersonasGetCollectionCall(page, firstName, lastName, email, email2, mobilePhoneNumber, mobilePhoneNumber2, gender, gender2, orderCreatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, dateOfBirthBefore, dateOfBirthStrictlyBefore, dateOfBirthAfter, dateOfBirthStrictlyAfter, metadata, _callback);

    }


    private ApiResponse<List<PersonaCollectionRead>> apiPersonasGetCollectionWithHttpInfo(Integer page, String firstName, String lastName, String email, List<String> email2, String mobilePhoneNumber, List<String> mobilePhoneNumber2, String gender, List<String> gender2, String orderCreatedAt, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String dateOfBirthBefore, String dateOfBirthStrictlyBefore, String dateOfBirthAfter, String dateOfBirthStrictlyAfter, List<String> metadata) throws ApiException {
        okhttp3.Call localVarCall = apiPersonasGetCollectionValidateBeforeCall(page, firstName, lastName, email, email2, mobilePhoneNumber, mobilePhoneNumber2, gender, gender2, orderCreatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, dateOfBirthBefore, dateOfBirthStrictlyBefore, dateOfBirthAfter, dateOfBirthStrictlyAfter, metadata, null);
        Type localVarReturnType = new TypeToken<List<PersonaCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiPersonasGetCollectionAsync(Integer page, String firstName, String lastName, String email, List<String> email2, String mobilePhoneNumber, List<String> mobilePhoneNumber2, String gender, List<String> gender2, String orderCreatedAt, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String dateOfBirthBefore, String dateOfBirthStrictlyBefore, String dateOfBirthAfter, String dateOfBirthStrictlyAfter, List<String> metadata, final ApiCallback<List<PersonaCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonasGetCollectionValidateBeforeCall(page, firstName, lastName, email, email2, mobilePhoneNumber, mobilePhoneNumber2, gender, gender2, orderCreatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, dateOfBirthBefore, dateOfBirthStrictlyBefore, dateOfBirthAfter, dateOfBirthStrictlyAfter, metadata, _callback);
        Type localVarReturnType = new TypeToken<List<PersonaCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiPersonasGetCollectionRequest {
        private Integer page;
        private String firstName;
        private String lastName;
        private String email;
        private List<String> email2;
        private String mobilePhoneNumber;
        private List<String> mobilePhoneNumber2;
        private String gender;
        private List<String> gender2;
        private String orderCreatedAt;
        private String createdAtBefore;
        private String createdAtStrictlyBefore;
        private String createdAtAfter;
        private String createdAtStrictlyAfter;
        private String dateOfBirthBefore;
        private String dateOfBirthStrictlyBefore;
        private String dateOfBirthAfter;
        private String dateOfBirthStrictlyAfter;
        private List<String> metadata;

        private APIapiPersonasGetCollectionRequest() {
        }

        /**
         * Set page
         * @param page The collection page number (optional, default to 1)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set firstName
         * @param firstName  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }

        /**
         * Set lastName
         * @param lastName  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }

        /**
         * Set email
         * @param email  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest email(String email) {
            this.email = email;
            return this;
        }

        /**
         * Set email2
         * @param email2  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest email2(List<String> email2) {
            this.email2 = email2;
            return this;
        }

        /**
         * Set mobilePhoneNumber
         * @param mobilePhoneNumber  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest mobilePhoneNumber(String mobilePhoneNumber) {
            this.mobilePhoneNumber = mobilePhoneNumber;
            return this;
        }

        /**
         * Set mobilePhoneNumber2
         * @param mobilePhoneNumber2  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest mobilePhoneNumber2(List<String> mobilePhoneNumber2) {
            this.mobilePhoneNumber2 = mobilePhoneNumber2;
            return this;
        }

        /**
         * Set gender
         * @param gender Filter on a specific value of gender (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest gender(String gender) {
            this.gender = gender;
            return this;
        }

        /**
         * Set gender2
         * @param gender2 Filter on a limited subset of gender (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest gender2(List<String> gender2) {
            this.gender2 = gender2;
            return this;
        }

        /**
         * Set orderCreatedAt
         * @param orderCreatedAt  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest orderCreatedAt(String orderCreatedAt) {
            this.orderCreatedAt = orderCreatedAt;
            return this;
        }

        /**
         * Set createdAtBefore
         * @param createdAtBefore  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest createdAtBefore(String createdAtBefore) {
            this.createdAtBefore = createdAtBefore;
            return this;
        }

        /**
         * Set createdAtStrictlyBefore
         * @param createdAtStrictlyBefore  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest createdAtStrictlyBefore(String createdAtStrictlyBefore) {
            this.createdAtStrictlyBefore = createdAtStrictlyBefore;
            return this;
        }

        /**
         * Set createdAtAfter
         * @param createdAtAfter  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest createdAtAfter(String createdAtAfter) {
            this.createdAtAfter = createdAtAfter;
            return this;
        }

        /**
         * Set createdAtStrictlyAfter
         * @param createdAtStrictlyAfter  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest createdAtStrictlyAfter(String createdAtStrictlyAfter) {
            this.createdAtStrictlyAfter = createdAtStrictlyAfter;
            return this;
        }

        /**
         * Set dateOfBirthBefore
         * @param dateOfBirthBefore  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest dateOfBirthBefore(String dateOfBirthBefore) {
            this.dateOfBirthBefore = dateOfBirthBefore;
            return this;
        }

        /**
         * Set dateOfBirthStrictlyBefore
         * @param dateOfBirthStrictlyBefore  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest dateOfBirthStrictlyBefore(String dateOfBirthStrictlyBefore) {
            this.dateOfBirthStrictlyBefore = dateOfBirthStrictlyBefore;
            return this;
        }

        /**
         * Set dateOfBirthAfter
         * @param dateOfBirthAfter  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest dateOfBirthAfter(String dateOfBirthAfter) {
            this.dateOfBirthAfter = dateOfBirthAfter;
            return this;
        }

        /**
         * Set dateOfBirthStrictlyAfter
         * @param dateOfBirthStrictlyAfter  (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest dateOfBirthStrictlyAfter(String dateOfBirthStrictlyAfter) {
            this.dateOfBirthStrictlyAfter = dateOfBirthStrictlyAfter;
            return this;
        }

        /**
         * Set metadata
         * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
         * @return APIapiPersonasGetCollectionRequest
         */
        public APIapiPersonasGetCollectionRequest metadata(List<String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Build call for apiPersonasGetCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Persona collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiPersonasGetCollectionCall(page, firstName, lastName, email, email2, mobilePhoneNumber, mobilePhoneNumber2, gender, gender2, orderCreatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, dateOfBirthBefore, dateOfBirthStrictlyBefore, dateOfBirthAfter, dateOfBirthStrictlyAfter, metadata, _callback);
        }

        /**
         * Execute apiPersonasGetCollection request
         * @return List&lt;PersonaCollectionRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Persona collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public List<PersonaCollectionRead> execute() throws ApiException {
            ApiResponse<List<PersonaCollectionRead>> localVarResp = apiPersonasGetCollectionWithHttpInfo(page, firstName, lastName, email, email2, mobilePhoneNumber, mobilePhoneNumber2, gender, gender2, orderCreatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, dateOfBirthBefore, dateOfBirthStrictlyBefore, dateOfBirthAfter, dateOfBirthStrictlyAfter, metadata);
            return localVarResp.getData();
        }

        /**
         * Execute apiPersonasGetCollection request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PersonaCollectionRead&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Persona collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PersonaCollectionRead>> executeWithHttpInfo() throws ApiException {
            return apiPersonasGetCollectionWithHttpInfo(page, firstName, lastName, email, email2, mobilePhoneNumber, mobilePhoneNumber2, gender, gender2, orderCreatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, dateOfBirthBefore, dateOfBirthStrictlyBefore, dateOfBirthAfter, dateOfBirthStrictlyAfter, metadata);
        }

        /**
         * Execute apiPersonasGetCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Persona collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PersonaCollectionRead>> _callback) throws ApiException {
            return apiPersonasGetCollectionAsync(page, firstName, lastName, email, email2, mobilePhoneNumber, mobilePhoneNumber2, gender, gender2, orderCreatedAt, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, dateOfBirthBefore, dateOfBirthStrictlyBefore, dateOfBirthAfter, dateOfBirthStrictlyAfter, metadata, _callback);
        }
    }

    /**
     * Retrieves the collection of Persona resources.
     * Retrieves the collection of Persona resources.
     * @return APIapiPersonasGetCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Persona collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiPersonasGetCollectionRequest apiPersonasGetCollection() {
        return new APIapiPersonasGetCollectionRequest();
    }
    private okhttp3.Call apiPersonasIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personas/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonasIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiPersonasIdDelete(Async)");
        }

        return apiPersonasIdDeleteCall(id, _callback);

    }


    private ApiResponse<Void> apiPersonasIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiPersonasIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call apiPersonasIdDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonasIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIapiPersonasIdDeleteRequest {
        private final String id;

        private APIapiPersonasIdDeleteRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for apiPersonasIdDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Persona resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiPersonasIdDeleteCall(id, _callback);
        }

        /**
         * Execute apiPersonasIdDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Persona resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            apiPersonasIdDeleteWithHttpInfo(id);
        }

        /**
         * Execute apiPersonasIdDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Persona resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return apiPersonasIdDeleteWithHttpInfo(id);
        }

        /**
         * Execute apiPersonasIdDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Persona resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return apiPersonasIdDeleteAsync(id, _callback);
        }
    }

    /**
     * Unregister a Persona (Your customer)
     * You **MAY** unregister (or free the email/phone number) your Persona entry using that endpoint. *Please note that* this operation will fail if that Persona have any ongoing operations.
     * @param id Persona identifier (required)
     * @return APIapiPersonasIdDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Persona resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiPersonasIdDeleteRequest apiPersonasIdDelete(String id) {
        return new APIapiPersonasIdDeleteRequest(id);
    }
    private okhttp3.Call apiPersonasIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personas/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonasIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiPersonasIdGet(Async)");
        }

        return apiPersonasIdGetCall(id, _callback);

    }


    private ApiResponse<PersonaRead> apiPersonasIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiPersonasIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PersonaRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiPersonasIdGetAsync(String id, final ApiCallback<PersonaRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonasIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PersonaRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiPersonasIdGetRequest {
        private final String id;

        private APIapiPersonasIdGetRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for apiPersonasIdGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Persona resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiPersonasIdGetCall(id, _callback);
        }

        /**
         * Execute apiPersonasIdGet request
         * @return PersonaRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Persona resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public PersonaRead execute() throws ApiException {
            ApiResponse<PersonaRead> localVarResp = apiPersonasIdGetWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute apiPersonasIdGet request with HTTP info returned
         * @return ApiResponse&lt;PersonaRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Persona resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonaRead> executeWithHttpInfo() throws ApiException {
            return apiPersonasIdGetWithHttpInfo(id);
        }

        /**
         * Execute apiPersonasIdGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Persona resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonaRead> _callback) throws ApiException {
            return apiPersonasIdGetAsync(id, _callback);
        }
    }

    /**
     * Retrieves a Persona resource.
     * Retrieves a Persona resource.
     * @param id Persona identifier (required)
     * @return APIapiPersonasIdGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Persona resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiPersonasIdGetRequest apiPersonasIdGet(String id) {
        return new APIapiPersonasIdGetRequest(id);
    }
    private okhttp3.Call apiPersonasIdPatchCall(String id, PersonaUpdate personaUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personaUpdate;

        // create path and map variables
        String localVarPath = "/personas/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonasIdPatchValidateBeforeCall(String id, PersonaUpdate personaUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiPersonasIdPatch(Async)");
        }

        // verify the required parameter 'personaUpdate' is set
        if (personaUpdate == null) {
            throw new ApiException("Missing the required parameter 'personaUpdate' when calling apiPersonasIdPatch(Async)");
        }

        return apiPersonasIdPatchCall(id, personaUpdate, _callback);

    }


    private ApiResponse<PersonaRead> apiPersonasIdPatchWithHttpInfo(String id, PersonaUpdate personaUpdate) throws ApiException {
        okhttp3.Call localVarCall = apiPersonasIdPatchValidateBeforeCall(id, personaUpdate, null);
        Type localVarReturnType = new TypeToken<PersonaRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiPersonasIdPatchAsync(String id, PersonaUpdate personaUpdate, final ApiCallback<PersonaRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonasIdPatchValidateBeforeCall(id, personaUpdate, _callback);
        Type localVarReturnType = new TypeToken<PersonaRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiPersonasIdPatchRequest {
        private final String id;
        private final PersonaUpdate personaUpdate;

        private APIapiPersonasIdPatchRequest(String id, PersonaUpdate personaUpdate) {
            this.id = id;
            this.personaUpdate = personaUpdate;
        }

        /**
         * Build call for apiPersonasIdPatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Persona resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiPersonasIdPatchCall(id, personaUpdate, _callback);
        }

        /**
         * Execute apiPersonasIdPatch request
         * @return PersonaRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Persona resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public PersonaRead execute() throws ApiException {
            ApiResponse<PersonaRead> localVarResp = apiPersonasIdPatchWithHttpInfo(id, personaUpdate);
            return localVarResp.getData();
        }

        /**
         * Execute apiPersonasIdPatch request with HTTP info returned
         * @return ApiResponse&lt;PersonaRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Persona resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonaRead> executeWithHttpInfo() throws ApiException {
            return apiPersonasIdPatchWithHttpInfo(id, personaUpdate);
        }

        /**
         * Execute apiPersonasIdPatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Persona resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonaRead> _callback) throws ApiException {
            return apiPersonasIdPatchAsync(id, personaUpdate, _callback);
        }
    }

    /**
     * Updates the Persona resource.
     * Update your Persona (eg. your customer/user entry) through that API call. _Beware that updating_ **email** and/or the **mobile phone number** must be done using non reserved values. Otherwise this operation will be rejected.
     * @param id Persona identifier (required)
     * @param personaUpdate The updated Persona resource (required)
     * @return APIapiPersonasIdPatchRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Persona resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiPersonasIdPatchRequest apiPersonasIdPatch(String id, PersonaUpdate personaUpdate) {
        return new APIapiPersonasIdPatchRequest(id, personaUpdate);
    }
    private okhttp3.Call apiPersonasPostCall(PersonaWrite personaWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personaWrite;

        // create path and map variables
        String localVarPath = "/personas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonasPostValidateBeforeCall(PersonaWrite personaWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personaWrite' is set
        if (personaWrite == null) {
            throw new ApiException("Missing the required parameter 'personaWrite' when calling apiPersonasPost(Async)");
        }

        return apiPersonasPostCall(personaWrite, _callback);

    }


    private ApiResponse<PersonaRead> apiPersonasPostWithHttpInfo(PersonaWrite personaWrite) throws ApiException {
        okhttp3.Call localVarCall = apiPersonasPostValidateBeforeCall(personaWrite, null);
        Type localVarReturnType = new TypeToken<PersonaRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiPersonasPostAsync(PersonaWrite personaWrite, final ApiCallback<PersonaRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonasPostValidateBeforeCall(personaWrite, _callback);
        Type localVarReturnType = new TypeToken<PersonaRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiPersonasPostRequest {
        private final PersonaWrite personaWrite;

        private APIapiPersonasPostRequest(PersonaWrite personaWrite) {
            this.personaWrite = personaWrite;
        }

        /**
         * Build call for apiPersonasPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Persona resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiPersonasPostCall(personaWrite, _callback);
        }

        /**
         * Execute apiPersonasPost request
         * @return PersonaRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Persona resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public PersonaRead execute() throws ApiException {
            ApiResponse<PersonaRead> localVarResp = apiPersonasPostWithHttpInfo(personaWrite);
            return localVarResp.getData();
        }

        /**
         * Execute apiPersonasPost request with HTTP info returned
         * @return ApiResponse&lt;PersonaRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Persona resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonaRead> executeWithHttpInfo() throws ApiException {
            return apiPersonasPostWithHttpInfo(personaWrite);
        }

        /**
         * Execute apiPersonasPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Persona resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonaRead> _callback) throws ApiException {
            return apiPersonasPostAsync(personaWrite, _callback);
        }
    }

    /**
     * Register a Persona (Your customer)
     * You should not register your whole database of users, only those who are concerned by a Transaction operation. One Persona entry for your organization can be assigned as a seller or buyer.  **Notes:**   - (i) There is a unique constraint for the mobile phone numbers and email.   - (ii) You will have to issue a DELETE operation on a Persona that withhold a specific phone number or email.   - (iii) You are NOT REQUIRED to provide email OR a mobile phone number but it is highly recommended, if none provided the email will be generated as &#39;{ulid}@your-domain.tld&#39;. In that case, please specify at least one metadata in order to find your entry with ease.
     * @param personaWrite The new Persona resource (required)
     * @return APIapiPersonasPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Persona resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiPersonasPostRequest apiPersonasPost(PersonaWrite personaWrite) {
        return new APIapiPersonasPostRequest(personaWrite);
    }
}
